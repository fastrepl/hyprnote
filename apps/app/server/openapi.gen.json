{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "version": ""
  },
  "paths": {
    "/health": {
      "get": {}
    },
    "/api/native/user/integrations": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NangoIntegration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/native/subscription": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        }
      }
    },
    "/api/web/connect": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseParams"
                }
              }
            }
          }
        }
      }
    },
    "/api/web/session/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      }
    },
    "/api/web/integration/connection": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NangoConnectSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NangoConnectSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/completions": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer_token": {
        "type": "http",
        "scheme": "Bearer"
      }
    },
    "schemas": {
      "ChatCompletionAudio": {
        "type": "object",
        "required": [
          "format",
          "voice"
        ],
        "properties": {
          "format": {
            "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`.",
            "$ref": "#/components/schemas/ChatCompletionAudioFormat"
          },
          "voice": {
            "description": "The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).",
            "$ref": "#/components/schemas/ChatCompletionAudioVoice"
          }
        }
      },
      "ChatCompletionAudioFormat": {
        "type": "string",
        "enum": [
          "wav",
          "mp3",
          "flac",
          "opus",
          "pcm16"
        ]
      },
      "ChatCompletionAudioVoice": {
        "type": "string",
        "enum": [
          "alloy",
          "ash",
          "ballad",
          "coral",
          "echo",
          "sage",
          "shimmer",
          "verse"
        ]
      },
      "ChatCompletionFunctionCall": {
        "oneOf": [
          {
            "description": "The model does not call a function, and responds to the end-user.",
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "description": "The model can pick between an end-user or calling a function.",
            "type": "string",
            "enum": [
              "auto"
            ]
          },
          {
            "description": "Forces the model to call the specified function.",
            "type": "object",
            "required": [
              "Function"
            ],
            "properties": {
              "Function": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChatCompletionFunctions": {
        "deprecated": true,
        "type": "object",
        "required": [
          "name",
          "parameters"
        ],
        "properties": {
          "description": {
            "description": "A description of what the function does, used by the model to choose when and how to call the function.",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "type": "string"
          },
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
          }
        }
      },
      "ChatCompletionMessageToolCall": {
        "type": "object",
        "required": [
          "function",
          "id",
          "type"
        ],
        "properties": {
          "function": {
            "description": "The function that the model called.",
            "$ref": "#/components/schemas/FunctionCall"
          },
          "id": {
            "description": "The ID of the tool call.",
            "type": "string"
          },
          "type": {
            "description": "The type of the tool. Currently, only `function` is supported.",
            "$ref": "#/components/schemas/ChatCompletionToolType"
          }
        }
      },
      "ChatCompletionModalities": {
        "description": "Output types that you would like the model to generate for this request.\n\nMost models are capable of generating text, which is the default: `[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate both text and audio responses, you can use: `[\"text\", \"audio\"]`",
        "type": "string",
        "enum": [
          "text",
          "audio"
        ]
      },
      "ChatCompletionNamedToolChoice": {
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "type": "object",
        "required": [
          "function",
          "type"
        ],
        "properties": {
          "function": {
            "$ref": "#/components/schemas/FunctionName"
          },
          "type": {
            "description": "The type of the tool. Currently, only `function` is supported.",
            "$ref": "#/components/schemas/ChatCompletionToolType"
          }
        }
      },
      "ChatCompletionRequestAssistantMessageAudio": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for a previous audio response from the model.",
            "type": "string"
          }
        }
      },
      "ChatCompletionRequestAssistantMessageContent": {
        "anyOf": [
          {
            "description": "The text contents of the message.",
            "type": "string"
          },
          {
            "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
            }
          }
        ]
      },
      "ChatCompletionRequestAssistantMessageContentPart": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "text",
              "type"
            ],
            "properties": {
              "text": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "refusal",
              "type"
            ],
            "properties": {
              "refusal": {
                "description": "The refusal message generated by the model.",
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "refusal"
                ]
              }
            }
          }
        ]
      },
      "ChatCompletionRequestDeveloperMessageContent": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
            }
          }
        ]
      },
      "ChatCompletionRequestMessage": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "content",
              "role"
            ],
            "properties": {
              "content": {
                "description": "The contents of the developer message.",
                "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessageContent"
              },
              "name": {
                "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "role": {
                "type": "string",
                "enum": [
                  "developer"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "content",
              "role"
            ],
            "properties": {
              "content": {
                "description": "The contents of the system message.",
                "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContent"
              },
              "name": {
                "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "role": {
                "type": "string",
                "enum": [
                  "system"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "content",
              "role"
            ],
            "properties": {
              "content": {
                "description": "The contents of the user message.",
                "$ref": "#/components/schemas/ChatCompletionRequestUserMessageContent"
              },
              "name": {
                "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "role": {
                "type": "string",
                "enum": [
                  "user"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "role"
            ],
            "properties": {
              "audio": {
                "description": "Data about a previous audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio).",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageAudio"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "content": {
                "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContent"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "function_call": {
                "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                "deprecated": true,
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FunctionCall"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "refusal": {
                "description": "The refusal message by the assistant.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "role": {
                "type": "string",
                "enum": [
                  "assistant"
                ]
              },
              "tool_calls": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
                }
              }
            }
          },
          {
            "description": "Tool message",
            "type": "object",
            "required": [
              "content",
              "role",
              "tool_call_id"
            ],
            "properties": {
              "content": {
                "description": "The contents of the tool message.",
                "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContent"
              },
              "role": {
                "type": "string",
                "enum": [
                  "tool"
                ]
              },
              "tool_call_id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "name",
              "role"
            ],
            "properties": {
              "content": {
                "description": "The return value from the function call, to return to the model.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "The name of the function to call.",
                "type": "string"
              },
              "role": {
                "type": "string",
                "enum": [
                  "function"
                ]
              }
            }
          }
        ]
      },
      "ChatCompletionRequestMessageContentPartText": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "ChatCompletionRequestSystemMessageContent": {
        "anyOf": [
          {
            "description": "The text contents of the system message.",
            "type": "string"
          },
          {
            "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
            }
          }
        ]
      },
      "ChatCompletionRequestSystemMessageContentPart": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "text",
              "type"
            ],
            "properties": {
              "text": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          }
        ]
      },
      "ChatCompletionRequestToolMessageContent": {
        "anyOf": [
          {
            "description": "The text contents of the tool message.",
            "type": "string"
          },
          {
            "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
            }
          }
        ]
      },
      "ChatCompletionRequestToolMessageContentPart": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "text",
              "type"
            ],
            "properties": {
              "text": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          }
        ]
      },
      "ChatCompletionRequestUserMessageContent": {
        "anyOf": [
          {
            "description": "The text contents of the message.",
            "type": "string"
          },
          {
            "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text, image, or audio inputs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestUserMessageContentPart"
            }
          }
        ]
      },
      "ChatCompletionRequestUserMessageContentPart": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "text",
              "type"
            ],
            "properties": {
              "text": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "image_url",
              "type"
            ],
            "properties": {
              "image_url": {
                "$ref": "#/components/schemas/ImageUrl"
              },
              "type": {
                "type": "string",
                "enum": [
                  "image_url"
                ]
              }
            }
          },
          {
            "description": "Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).",
            "type": "object",
            "required": [
              "input_audio",
              "type"
            ],
            "properties": {
              "input_audio": {
                "$ref": "#/components/schemas/InputAudio"
              },
              "type": {
                "type": "string",
                "enum": [
                  "input_audio"
                ]
              }
            }
          }
        ]
      },
      "ChatCompletionStreamOptions": {
        "description": "Options for streaming response. Only set this when you set `stream: true`.",
        "type": "object",
        "required": [
          "include_usage"
        ],
        "properties": {
          "include_usage": {
            "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.",
            "type": "boolean"
          }
        }
      },
      "ChatCompletionTool": {
        "type": "object",
        "required": [
          "function",
          "type"
        ],
        "properties": {
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          },
          "type": {
            "$ref": "#/components/schemas/ChatCompletionToolType"
          }
        }
      },
      "ChatCompletionToolChoiceOption": {
        "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.present.",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none",
              "auto",
              "required"
            ]
          },
          {
            "type": "object",
            "required": [
              "named"
            ],
            "properties": {
              "named": {
                "$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChatCompletionToolType": {
        "type": "string",
        "enum": [
          "function"
        ]
      },
      "ConversationChunk": {
        "type": "object",
        "required": [
          "diarizations",
          "end",
          "local_audio_path",
          "remote_audio_path",
          "start",
          "transcripts"
        ],
        "properties": {
          "diarizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiarizationChunk"
            }
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "local_audio_path": {
            "type": "string"
          },
          "remote_audio_path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "transcripts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptChunk"
            }
          }
        }
      },
      "CreateChatCompletionRequest": {
        "type": "object",
        "required": [
          "messages",
          "model"
        ],
        "properties": {
          "audio": {
            "description": "Parameters for audio output. Required when audio output is requested with `modalities: [\"audio\"]`. [Learn more](https://platform.openai.com/docs/guides/audio).",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionAudio"
              },
              {
                "type": "null"
              }
            ]
          },
          "frequency_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "function_call": {
            "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.",
            "deprecated": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionFunctionCall"
              },
              {
                "type": "null"
              }
            ]
          },
          "functions": {
            "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.",
            "deprecated": true,
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionFunctions"
            }
          },
          "logit_bias": {
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": true
          },
          "logprobs": {
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "max_completion_tokens": {
            "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "max_tokens": {
            "description": "The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.\n\nThis value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API. This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](https://platform.openai.com/docs/guides/reasoning).",
            "deprecated": true,
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "messages": {
            "description": "A list of messages comprising the conversation so far. Depending on the [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are supported, like [text](https://platform.openai.com/docs/guides/text-generation), [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessage"
            }
          },
          "metadata": {
            "description": "Developer-defined tags and values used for filtering completions in the [dashboard](https://platform.openai.com/chat-completions)."
          },
          "modalities": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionModalities"
            }
          },
          "model": {
            "description": "ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.",
            "type": "string"
          },
          "n": {
            "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint8",
            "minimum": 0.0
          },
          "parallel_tool_calls": {
            "description": "Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling) during tool use.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "prediction": {
            "description": "Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/PredictionContent"
              },
              {
                "type": "null"
              }
            ]
          },
          "presence_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "reasoning_effort": {
            "description": "**o1 models only**\n\nConstrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\nCurrently supported values are `low`, `medium`, and `high`. Reducing\n\nreasoning effort can result in faster responses and fewer tokens used on reasoning in a response.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReasoningEffort"
              },
              {
                "type": "null"
              }
            ]
          },
          "response_format": {
            "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models/gpt-4o), [GPT-4o mini](https://platform.openai.com/docs/models/gpt-4o-mini), [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              },
              {
                "type": "null"
              }
            ]
          },
          "seed": {
            "description": "This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "service_tier": {
            "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service: - If set to 'auto', the system will utilize scale tier credits until they are exhausted. - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee. - When not set, the default behavior is 'auto'.\n\nWhen this parameter is set, the response body will include the `service_tier` utilized.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServiceTier"
              },
              {
                "type": "null"
              }
            ]
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Stop"
              },
              {
                "type": "null"
              }
            ]
          },
          "store": {
            "description": "Whether or not to store the output of this chat completion request\n\nfor use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or [evals](https://platform.openai.com/docs/guides/evals) products.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).",
            "type": [
              "boolean",
              "null"
            ]
          },
          "stream_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionStreamOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "temperature": {
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "tool_choice": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
              },
              {
                "type": "null"
              }
            ]
          },
          "tools": {
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTool"
            }
          },
          "top_logprobs": {
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint8",
            "minimum": 0.0
          },
          "top_p": {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "user": {
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "DiarizationChunk": {
        "type": "object",
        "required": [
          "end",
          "speaker",
          "start"
        ],
        "properties": {
          "end": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "speaker": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "FunctionCall": {
        "description": "The name and arguments of a function that should be called, as generated by the model.",
        "type": "object",
        "required": [
          "arguments",
          "name"
        ],
        "properties": {
          "arguments": {
            "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
            "type": "string"
          },
          "name": {
            "description": "The name of the function to call.",
            "type": "string"
          }
        }
      },
      "FunctionName": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The name of the function to call.",
            "type": "string"
          }
        }
      },
      "FunctionObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "description": "A description of what the function does, used by the model to choose when and how to call the function.",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "type": "string"
          },
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
          },
          "strict": {
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).",
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "ImageDetail": {
        "type": "string",
        "enum": [
          "auto",
          "low",
          "high"
        ]
      },
      "ImageUrl": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "detail": {
            "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageDetail"
              },
              {
                "type": "null"
              }
            ]
          },
          "url": {
            "description": "Either a URL of the image or the base64 encoded image data.",
            "type": "string"
          }
        }
      },
      "InputAudio": {
        "type": "object",
        "required": [
          "data",
          "format"
        ],
        "properties": {
          "data": {
            "description": "Base64 encoded audio data.",
            "type": "string"
          },
          "format": {
            "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".",
            "$ref": "#/components/schemas/InputAudioFormat"
          }
        }
      },
      "InputAudioFormat": {
        "type": "string",
        "enum": [
          "wav",
          "mp3"
        ]
      },
      "Membership": {
        "type": "string",
        "enum": [
          "Trial",
          "Basic",
          "Pro"
        ]
      },
      "NangoConnectSessionRequest": {
        "type": "object",
        "required": [
          "allowed_integrations",
          "end_user"
        ],
        "properties": {
          "allowed_integrations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "end_user": {
            "$ref": "#/components/schemas/NangoConnectSessionRequestUser"
          },
          "organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NangoConnectSessionRequestOrganization"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "NangoConnectSessionRequestOrganization": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "display_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NangoConnectSessionRequestUser": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "display_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "email": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NangoConnectSessionResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "object",
                "required": [
                  "expires_at",
                  "token"
                ],
                "properties": {
                  "expires_at": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "NangoIntegration": {
        "type": "string",
        "enum": [
          "google-calendar",
          "outlook-calendar"
        ]
      },
      "PredictionContent": {
        "description": "Static predicted output content, such as the content of a text file that is being regenerated.",
        "oneOf": [
          {
            "description": "The type of the predicted content you want to provide. This type is currently always `content`.",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "$ref": "#/components/schemas/PredictionContentContent"
              },
              "type": {
                "type": "string",
                "enum": [
                  "content"
                ]
              }
            }
          }
        ]
      },
      "PredictionContentContent": {
        "description": "The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly.",
        "anyOf": [
          {
            "description": "The content used for a Predicted Output. This is often the text of a file you are regenerating with minor changes.",
            "type": "string"
          },
          {
            "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text inputs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
            }
          }
        ]
      },
      "ReasoningEffort": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high"
        ]
      },
      "RequestParams": {
        "type": "object",
        "required": [
          "c",
          "f",
          "p"
        ],
        "properties": {
          "c": {
            "type": "string"
          },
          "f": {
            "type": "string"
          },
          "p": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "ResponseFormat": {
        "oneOf": [
          {
            "description": "The type of response format being defined: `text`",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          },
          {
            "description": "The type of response format being defined: `json_object`",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "json_object"
                ]
              }
            }
          },
          {
            "description": "The type of response format being defined: `json_schema`",
            "type": "object",
            "required": [
              "json_schema",
              "type"
            ],
            "properties": {
              "json_schema": {
                "$ref": "#/components/schemas/ResponseFormatJsonSchema"
              },
              "type": {
                "type": "string",
                "enum": [
                  "json_schema"
                ]
              }
            }
          }
        ]
      },
      "ResponseFormatJsonSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "description": "A description of what the response format is for, used by the model to determine how to respond in the format.",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "type": "string"
          },
          "schema": {
            "description": "The schema for the response format, described as a JSON Schema object."
          },
          "strict": {
            "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).",
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "ResponseParams": {
        "type": "object",
        "required": [
          "ai",
          "dt",
          "st",
          "ui"
        ],
        "properties": {
          "ai": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "st": {
            "type": "string"
          },
          "ui": {
            "type": "string"
          }
        }
      },
      "ServiceTier": {
        "type": "string",
        "enum": [
          "auto",
          "default"
        ]
      },
      "Session": {
        "type": "object",
        "required": [
          "conversations",
          "id",
          "raw_memo_html",
          "timestamp",
          "title",
          "user_id"
        ],
        "properties": {
          "audio_local_path": {
            "type": [
              "string",
              "null"
            ]
          },
          "audio_remote_path": {
            "type": [
              "string",
              "null"
            ]
          },
          "calendar_event_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationChunk"
            }
          },
          "enhanced_memo_html": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          },
          "raw_memo_html": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "Stop": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "Subscription": {
        "type": "object",
        "required": [
          "membership"
        ],
        "properties": {
          "membership": {
            "$ref": "#/components/schemas/Membership"
          }
        }
      },
      "TranscriptChunk": {
        "type": "object",
        "required": [
          "end",
          "start",
          "text"
        ],
        "properties": {
          "end": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "text": {
            "type": "string"
          }
        }
      }
    }
  }
}