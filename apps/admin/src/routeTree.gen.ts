/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app.index'
import { Route as AppSettingsRouteImport } from './routes/app.settings'
import { Route as AppIntegrationsRouteImport } from './routes/app.integrations'
import { Route as AppHomeRouteImport } from './routes/app.home'
import { ServerRoute as HealthServerRouteImport } from './routes/health'
import { ServerRoute as V1ModelsServerRouteImport } from './routes/v1/models'
import { ServerRoute as V1ChatCompletionsServerRouteImport } from './routes/v1/chat.completions'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppIntegrationsRoute = AppIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => AppRoute,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)
const HealthServerRoute = HealthServerRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootServerRouteImport,
} as any)
const V1ModelsServerRoute = V1ModelsServerRouteImport.update({
  id: '/v1/models',
  path: '/v1/models',
  getParentRoute: () => rootServerRouteImport,
} as any)
const V1ChatCompletionsServerRoute = V1ChatCompletionsServerRouteImport.update({
  id: '/v1/chat/completions',
  path: '/v1/chat/completions',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/home': typeof AppHomeRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app/home': typeof AppHomeRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/home': typeof AppHomeRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/app/home'
    | '/app/integrations'
    | '/app/settings'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/app/home'
    | '/app/integrations'
    | '/app/settings'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/app/home'
    | '/app/integrations'
    | '/app/settings'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/health': typeof HealthServerRoute
  '/v1/models': typeof V1ModelsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/v1/chat/completions': typeof V1ChatCompletionsServerRoute
}
export interface FileServerRoutesByTo {
  '/health': typeof HealthServerRoute
  '/v1/models': typeof V1ModelsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/v1/chat/completions': typeof V1ChatCompletionsServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/health': typeof HealthServerRoute
  '/v1/models': typeof V1ModelsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/v1/chat/completions': typeof V1ChatCompletionsServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/health' | '/v1/models' | '/api/auth/$' | '/v1/chat/completions'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/health' | '/v1/models' | '/api/auth/$' | '/v1/chat/completions'
  id:
    | '__root__'
    | '/health'
    | '/v1/models'
    | '/api/auth/$'
    | '/v1/chat/completions'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  HealthServerRoute: typeof HealthServerRoute
  V1ModelsServerRoute: typeof V1ModelsServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  V1ChatCompletionsServerRoute: typeof V1ChatCompletionsServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/integrations': {
      id: '/app/integrations'
      path: '/integrations'
      fullPath: '/app/integrations'
      preLoaderRoute: typeof AppIntegrationsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/home': {
      id: '/app/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/v1/models': {
      id: '/v1/models'
      path: '/v1/models'
      fullPath: '/v1/models'
      preLoaderRoute: typeof V1ModelsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/v1/chat/completions': {
      id: '/v1/chat/completions'
      path: '/v1/chat/completions'
      fullPath: '/v1/chat/completions'
      preLoaderRoute: typeof V1ChatCompletionsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppIntegrationsRoute: typeof AppIntegrationsRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppIntegrationsRoute: AppIntegrationsRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  HealthServerRoute: HealthServerRoute,
  V1ModelsServerRoute: V1ModelsServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  V1ChatCompletionsServerRoute: V1ChatCompletionsServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
