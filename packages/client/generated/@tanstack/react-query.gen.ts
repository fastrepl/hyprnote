// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getHealth, postApiNativeCreateTitle, postApiNativeSummarizeTranscript, postApiNativePostprocessEnhance, getApiNativeSubscription, postApiWebConnect, getApiWebSessionById, postApiWebIntegrationConnection, getApiWebSubscription } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetHealthData, PostApiNativeCreateTitleData, PostApiNativeCreateTitleResponse, PostApiNativeSummarizeTranscriptData, PostApiNativeSummarizeTranscriptResponse, PostApiNativePostprocessEnhanceData, PostApiNativePostprocessEnhanceResponse, GetApiNativeSubscriptionData, PostApiWebConnectData, PostApiWebConnectResponse, GetApiWebSessionByIdData, PostApiWebIntegrationConnectionData, PostApiWebIntegrationConnectionResponse, GetApiWebSubscriptionData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) => [
    createQueryKey('getHealth', options)
];

export const getHealthOptions = (options?: Options<GetHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHealthQueryKey(options)
    });
};

export const postApiNativeCreateTitleQueryKey = (options: Options<PostApiNativeCreateTitleData>) => [
    createQueryKey('postApiNativeCreateTitle', options)
];

export const postApiNativeCreateTitleOptions = (options: Options<PostApiNativeCreateTitleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiNativeCreateTitle({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiNativeCreateTitleQueryKey(options)
    });
};

export const postApiNativeCreateTitleMutation = (options?: Partial<Options<PostApiNativeCreateTitleData>>) => {
    const mutationOptions: UseMutationOptions<PostApiNativeCreateTitleResponse, DefaultError, Options<PostApiNativeCreateTitleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiNativeCreateTitle({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiNativeSummarizeTranscriptQueryKey = (options: Options<PostApiNativeSummarizeTranscriptData>) => [
    createQueryKey('postApiNativeSummarizeTranscript', options)
];

export const postApiNativeSummarizeTranscriptOptions = (options: Options<PostApiNativeSummarizeTranscriptData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiNativeSummarizeTranscript({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiNativeSummarizeTranscriptQueryKey(options)
    });
};

export const postApiNativeSummarizeTranscriptMutation = (options?: Partial<Options<PostApiNativeSummarizeTranscriptData>>) => {
    const mutationOptions: UseMutationOptions<PostApiNativeSummarizeTranscriptResponse, DefaultError, Options<PostApiNativeSummarizeTranscriptData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiNativeSummarizeTranscript({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiNativePostprocessEnhanceQueryKey = (options: Options<PostApiNativePostprocessEnhanceData>) => [
    createQueryKey('postApiNativePostprocessEnhance', options)
];

export const postApiNativePostprocessEnhanceOptions = (options: Options<PostApiNativePostprocessEnhanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiNativePostprocessEnhance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiNativePostprocessEnhanceQueryKey(options)
    });
};

export const postApiNativePostprocessEnhanceMutation = (options?: Partial<Options<PostApiNativePostprocessEnhanceData>>) => {
    const mutationOptions: UseMutationOptions<PostApiNativePostprocessEnhanceResponse, DefaultError, Options<PostApiNativePostprocessEnhanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiNativePostprocessEnhance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiNativeSubscriptionQueryKey = (options?: Options<GetApiNativeSubscriptionData>) => [
    createQueryKey('getApiNativeSubscription', options)
];

export const getApiNativeSubscriptionOptions = (options?: Options<GetApiNativeSubscriptionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiNativeSubscription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiNativeSubscriptionQueryKey(options)
    });
};

export const postApiWebConnectQueryKey = (options: Options<PostApiWebConnectData>) => [
    createQueryKey('postApiWebConnect', options)
];

export const postApiWebConnectOptions = (options: Options<PostApiWebConnectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiWebConnect({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiWebConnectQueryKey(options)
    });
};

export const postApiWebConnectMutation = (options?: Partial<Options<PostApiWebConnectData>>) => {
    const mutationOptions: UseMutationOptions<PostApiWebConnectResponse, DefaultError, Options<PostApiWebConnectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiWebConnect({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiWebSessionByIdQueryKey = (options?: Options<GetApiWebSessionByIdData>) => [
    createQueryKey('getApiWebSessionById', options)
];

export const getApiWebSessionByIdOptions = (options?: Options<GetApiWebSessionByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiWebSessionById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiWebSessionByIdQueryKey(options)
    });
};

export const postApiWebIntegrationConnectionQueryKey = (options: Options<PostApiWebIntegrationConnectionData>) => [
    createQueryKey('postApiWebIntegrationConnection', options)
];

export const postApiWebIntegrationConnectionOptions = (options: Options<PostApiWebIntegrationConnectionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiWebIntegrationConnection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiWebIntegrationConnectionQueryKey(options)
    });
};

export const postApiWebIntegrationConnectionMutation = (options?: Partial<Options<PostApiWebIntegrationConnectionData>>) => {
    const mutationOptions: UseMutationOptions<PostApiWebIntegrationConnectionResponse, DefaultError, Options<PostApiWebIntegrationConnectionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiWebIntegrationConnection({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiWebSubscriptionQueryKey = (options?: Options<GetApiWebSubscriptionData>) => [
    createQueryKey('getApiWebSubscription', options)
];

export const getApiWebSubscriptionOptions = (options?: Options<GetApiWebSubscriptionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiWebSubscription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiWebSubscriptionQueryKey(options)
    });
};