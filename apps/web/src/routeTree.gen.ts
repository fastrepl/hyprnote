/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthSignUpImport } from "./routes/auth.sign-up";
import { Route as AuthSignOutImport } from "./routes/auth.sign-out";
import { Route as AuthSignInImport } from "./routes/auth.sign-in";
import { Route as AuthConnectImport } from "./routes/auth.connect";
import { Route as AuthConnectSuccessImport } from "./routes/auth.connect.success";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignUpRoute = AuthSignUpImport.update({
  id: "/auth/sign-up",
  path: "/auth/sign-up",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignOutRoute = AuthSignOutImport.update({
  id: "/auth/sign-out",
  path: "/auth/sign-out",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignInRoute = AuthSignInImport.update({
  id: "/auth/sign-in",
  path: "/auth/sign-in",
  getParentRoute: () => rootRoute,
} as any);

const AuthConnectRoute = AuthConnectImport.update({
  id: "/auth/connect",
  path: "/auth/connect",
  getParentRoute: () => rootRoute,
} as any);

const AuthConnectSuccessRoute = AuthConnectSuccessImport.update({
  id: "/success",
  path: "/success",
  getParentRoute: () => AuthConnectRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/connect": {
      id: "/auth/connect";
      path: "/auth/connect";
      fullPath: "/auth/connect";
      preLoaderRoute: typeof AuthConnectImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-in": {
      id: "/auth/sign-in";
      path: "/auth/sign-in";
      fullPath: "/auth/sign-in";
      preLoaderRoute: typeof AuthSignInImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-out": {
      id: "/auth/sign-out";
      path: "/auth/sign-out";
      fullPath: "/auth/sign-out";
      preLoaderRoute: typeof AuthSignOutImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-up": {
      id: "/auth/sign-up";
      path: "/auth/sign-up";
      fullPath: "/auth/sign-up";
      preLoaderRoute: typeof AuthSignUpImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/connect/success": {
      id: "/auth/connect/success";
      path: "/success";
      fullPath: "/auth/connect/success";
      preLoaderRoute: typeof AuthConnectSuccessImport;
      parentRoute: typeof AuthConnectImport;
    };
  }
}

// Create and export the route tree

interface AuthConnectRouteChildren {
  AuthConnectSuccessRoute: typeof AuthConnectSuccessRoute;
}

const AuthConnectRouteChildren: AuthConnectRouteChildren = {
  AuthConnectSuccessRoute: AuthConnectSuccessRoute,
};

const AuthConnectRouteWithChildren = AuthConnectRoute._addFileChildren(
  AuthConnectRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/auth/connect": typeof AuthConnectRouteWithChildren;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/auth/connect": typeof AuthConnectRouteWithChildren;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/auth/connect": typeof AuthConnectRouteWithChildren;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/auth/connect"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/auth/connect/success";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/auth/connect"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/auth/connect/success";
  id:
    | "__root__"
    | "/"
    | "/auth/connect"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/auth/connect/success";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthConnectRoute: typeof AuthConnectRouteWithChildren;
  AuthSignInRoute: typeof AuthSignInRoute;
  AuthSignOutRoute: typeof AuthSignOutRoute;
  AuthSignUpRoute: typeof AuthSignUpRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthConnectRoute: AuthConnectRouteWithChildren,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/connect",
        "/auth/sign-in",
        "/auth/sign-out",
        "/auth/sign-up"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/connect": {
      "filePath": "auth.connect.tsx",
      "children": [
        "/auth/connect/success"
      ]
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx"
    },
    "/auth/sign-out": {
      "filePath": "auth.sign-out.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx"
    },
    "/auth/connect/success": {
      "filePath": "auth.connect.success.tsx",
      "parent": "/auth/connect"
    }
  }
}
ROUTE_MANIFEST_END */
