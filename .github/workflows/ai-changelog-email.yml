name: AI Changelog Generator

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ai_model:
        description: "OpenRouter model to use"
        required: false
        default: "anthropic/claude-sonnet-4"
      test_mode:
        description: "Test mode (use last 10 commits instead of since last release)"
        required: false
        default: "false"
        type: boolean

permissions:
  contents: write

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install axios @octokit/rest

      - name: Generate changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AI_MODEL: ${{ (github.event.inputs && github.event.inputs.ai_model) || 'anthropic/claude-sonnet-4' }}
          TEST_MODE: ${{ (github.event.inputs && github.event.inputs.test_mode) || 'false' }}
        run: |
          cat > changelog-generator.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const axios = require('axios');
          const fs = require('fs');

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          const testMode = process.env.TEST_MODE === 'true';

          async function getCommits() {
            try {
              if (testMode) {
                console.log('TEST MODE: Getting last 10 commits');
                const { data } = await octokit.rest.repos.listCommits({
                  owner, repo, per_page: 10
                });
                return data;
              }

              // Get releases and compare
              const { data: releases } = await octokit.rest.repos.listReleases({
                owner, repo, per_page: 2
              });

              if (releases.length < 2) {
                console.log('Not enough releases, getting last 50 commits');
                const { data } = await octokit.rest.repos.listCommits({
                  owner, repo, per_page: 50
                });
                return data;
              }

              const [current, previous] = releases;
              console.log(`Getting commits between ${previous.tag_name} and ${current.tag_name}`);

              const { data: comparison } = await octokit.rest.repos.compareCommits({
                owner, repo, base: previous.tag_name, head: current.tag_name
              });

              return comparison.commits;
            } catch (error) {
              console.error('Error getting commits:', error.message);
              const { data } = await octokit.rest.repos.listCommits({
                owner, repo, per_page: 50
              });
              return data;
            }
          }

          async function getCommitDetails(sha) {
            try {
              const { data } = await octokit.rest.repos.getCommit({
                owner, repo, ref: sha
              });
              return data;
            } catch (error) {
              console.error(`Error getting commit details for ${sha}:`, error.message);
              return null;
            }
          }

          async function generateChangelog(commits, commitDetails) {
            const prompt = `You are a technical writer creating a changelog for hyprnote - a desktop note-taking app with AI capabilities (Tauri + React).

          Create a professional changelog with:
          - Categories: Breaking Changes, Features, Improvements, Bug Fixes, Internal, Dependencies
          - No emojis or casual language
          - Focus on functional impact and technical details
          - Reference specific components when applicable

          COMMITS:
          ${JSON.stringify(commits.map(c => ({
            sha: c.sha.substring(0, 8),
            message: c.commit.message,
            author: c.commit.author.name,
            date: c.commit.author.date
          })), null, 2)}

          DETAILED CHANGES:
          ${commitDetails.map(detail => {
            if (!detail) return 'Commit details unavailable';
            return `
          Commit: ${detail.sha.substring(0, 8)}
          Message: ${detail.commit.message}
          Files changed: ${detail.files ? detail.files.length : 0}
          ${detail.files ? detail.files.map(f => `- ${f.filename} (+${f.additions} -${f.deletions})`).join('\n') : ''}
          `;
          }).join('\n---\n')}

          Generate a markdown changelog suitable for release notes.`;

            const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
              model: process.env.AI_MODEL,
              messages: [
                {
                  role: 'system',
                  content: 'You are a technical writer specializing in software documentation. Generate precise, professional changelog content.'
                },
                { role: 'user', content: prompt }
              ],
              max_tokens: 4000,
              temperature: 0.1
            }, {
              headers: {
                'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://github.com/hyprnote/hyprnote',
                'X-Title': 'hyprnote AI Changelog Generator'
              }
            });

            return response.data.choices[0].message.content;
          }

          async function main() {
            try {
              console.log('Starting changelog generation...');

              const commits = await getCommits();
              console.log(`Found ${commits.length} commits to analyze`);

              if (commits.length === 0) {
                console.log('No commits found');
                return;
              }

              console.log('Fetching detailed commit information...');
              const commitDetails = await Promise.all(
                commits.slice(0, 20).map(commit => getCommitDetails(commit.sha))
              );

              console.log('Generating changelog with AI...');
              const commitsToProcess = commits.slice(0, 20);
              const changelog = await generateChangelog(commitsToProcess, commitDetails);

              fs.writeFileSync('changelog.md', changelog);

              const metadata = {
                generated_at: new Date().toISOString(),
                commit_count: commits.length,
                commits_processed: commitsToProcess.length,
                model_used: process.env.AI_MODEL,
                test_mode: testMode,
                repository: `${owner}/${repo}`,
                commits_analyzed: commitsToProcess.map(c => ({
                  sha: c.sha.substring(0, 8),
                  message: c.commit.message.split('\n')[0],
                  author: c.commit.author.name,
                  date: c.commit.author.date
                }))
              };

              fs.writeFileSync('metadata.json', JSON.stringify(metadata, null, 2));

              console.log('Changelog generated successfully');
              console.log('Preview:');
              console.log(changelog.substring(0, 500) + '...');

            } catch (error) {
              console.error('Error in main:', error);
              process.exit(1);
            }
          }

          main();
          EOF

          node changelog-generator.js

      - name: Generate changelog file
        run: |
          # Create a timestamped changelog file
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          FILENAME="CHANGELOG_${TIMESTAMP}.md"

          # Add header with metadata
          cat > "$FILENAME" << EOF
          # Changelog Generated $(date -u)

          **Generation Details:**
          - Generated: $(date -u)
          - Trigger: ${{ github.event_name == 'release' && 'Release Published' || 'Manual Trigger' }}
          - Model: ${{ (github.event.inputs && github.event.inputs.ai_model) || 'anthropic/claude-sonnet-4' }}
          - Test Mode: ${{ (github.event.inputs && github.event.inputs.test_mode) || 'false' }}
          - Repository: ${{ github.repository }}
          - Workflow Run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          EOF

          # Append the AI-generated changelog
          cat changelog.md >> "$FILENAME"

          # Set output for commit step
          echo "changelog_file=$FILENAME" >> $GITHUB_OUTPUT

          echo "Generated changelog file: $FILENAME"
          echo "Preview:"
          head -50 "$FILENAME"
        id: generate_file

      - name: Commit changelog file
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add the generated file
          git add "${{ steps.generate_file.outputs.changelog_file }}"

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add AI-generated changelog

            Generated: $(date -u)
            Model: ${{ (github.event.inputs && github.event.inputs.ai_model) || 'anthropic/claude-sonnet-4' }}
            Test Mode: ${{ (github.event.inputs && github.event.inputs.test_mode) || 'false' }}

            ðŸ¤– Generated with AI Changelog Workflow

            Co-Authored-By: GitHub Action <action@github.com>"

            git push

            echo "Changelog committed as: ${{ steps.generate_file.outputs.changelog_file }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelog-artifacts
          path: |
            changelog.md
            metadata.json
          retention-days: 30
