// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getUserId() : Promise<string> {
    return await TAURI_INVOKE("get_user_id");
},
async runEnhance(req: EnhanceRequest, onEvent: TAURI_CHANNEL<string>) : Promise<null> {
    return await TAURI_INVOKE("run_enhance", { req, onEvent });
},
async listBuiltinTemplates() : Promise<Template[]> {
    return await TAURI_INVOKE("list_builtin_templates");
},
async openPermissionSettings(permission: OSPermission) : Promise<void> {
    await TAURI_INVOKE("open_permission_settings", { permission });
},
async checkPermissionStatus(permission: OSPermission) : Promise<boolean | null> {
    return await TAURI_INVOKE("check_permission_status", { permission });
},
async startOauthServer() : Promise<number> {
    return await TAURI_INVOKE("start_oauth_server");
},
async cancelOauthServer(port: number) : Promise<null> {
    return await TAURI_INVOKE("cancel_oauth_server", { port });
},
async isAuthenticated() : Promise<boolean> {
    return await TAURI_INVOKE("is_authenticated");
},
async showWindow(window: ShowHyprWindow) : Promise<void> {
    await TAURI_INVOKE("show_window", { window });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Config = { id: string; user_id: string; general: ConfigGeneral; notification: ConfigNotification }
export type ConfigGeneral = { autostart: boolean; speech_language: string; display_language: string; jargons: string[]; tags: string[] }
export type ConfigNotification = { before: boolean; auto: boolean }
export type EnhanceRequest = { pre_meeting_editor: string; in_meeting_editor: string; template: Template; config: Config; event: Event | null; participants: Human[]; timeline_view: TimelineView }
export type Event = { id: string; user_id: string; tracking_id: string; calendar_id: string; name: string; note: string; start_date: string; end_date: string; google_event_url: string | null }
export type Human = { id: string; organization_id: string | null; is_user: boolean; full_name: string | null; email: string | null; job_title: string | null; linkedin_username: string | null }
export type OSPermission = "calendar" | "contacts" | "audioRecording" | "screenRecording" | "microphone" | "accessibility"
export type ShowHyprWindow = "Demo" | "MainWithoutDemo" | "MainWithDemo"
export type TAURI_CHANNEL<TSend> = null
export type Template = { id: string; user_id: string; title: string; description: string; sections: TemplateSection[]; tags: string[] }
export type TemplateSection = { title: string; description: string }
export type TimelineView = { items: TimelineViewItem[] }
export type TimelineViewItem = { start: number; end: number; speaker: string; text: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
