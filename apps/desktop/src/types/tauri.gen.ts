// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async runEnhance(req: EnhanceRequest, onEvent: TAURI_CHANNEL<string>) : Promise<null> {
    return await TAURI_INVOKE("run_enhance", { req, onEvent });
},
async listBuiltinTemplates() : Promise<Template[]> {
    return await TAURI_INVOKE("list_builtin_templates");
},
async openPermissionSettings(permission: OSPermission) : Promise<void> {
    await TAURI_INVOKE("open_permission_settings", { permission });
},
async checkPermissionStatus(permission: OSPermission) : Promise<boolean | null> {
    return await TAURI_INVOKE("check_permission_status", { permission });
},
async startSession(onEvent: TAURI_CHANNEL<SessionStatus>) : Promise<null> {
    return await TAURI_INVOKE("start_session", { onEvent });
},
async stopSession() : Promise<null> {
    return await TAURI_INVOKE("stop_session");
},
async getTimeline() : Promise<TimelineView> {
    return await TAURI_INVOKE("get_timeline");
},
async startOauthServer() : Promise<number> {
    return await TAURI_INVOKE("start_oauth_server");
},
async cancelOauthServer(port: number) : Promise<null> {
    return await TAURI_INVOKE("cancel_oauth_server", { port });
},
async isAuthenticated() : Promise<boolean> {
    return await TAURI_INVOKE("is_authenticated");
},
async showWindow(window: ShowHyprWindow) : Promise<void> {
    await TAURI_INVOKE("show_window", { window });
},
async upsertSession(session: Session) : Promise<Session> {
    return await TAURI_INVOKE("upsert_session", { session });
},
async upsertCalendar(calendar: Calendar) : Promise<Calendar> {
    return await TAURI_INVOKE("upsert_calendar", { calendar });
},
async listCalendars() : Promise<Calendar[]> {
    return await TAURI_INVOKE("list_calendars");
},
async listEvents() : Promise<Event[]> {
    return await TAURI_INVOKE("list_events");
},
async listSessions(search: string | null) : Promise<Session[]> {
    return await TAURI_INVOKE("list_sessions", { search });
},
async getSession(option: SessionFilter) : Promise<Session | null> {
    return await TAURI_INVOKE("get_session", { option });
},
async setSessionEvent(sessionId: string, eventId: string) : Promise<null> {
    return await TAURI_INVOKE("set_session_event", { sessionId, eventId });
},
async listTemplates() : Promise<Template[]> {
    return await TAURI_INVOKE("list_templates");
},
async upsertTemplate(template: Template) : Promise<Template> {
    return await TAURI_INVOKE("upsert_template", { template });
},
async deleteTemplate(id: string) : Promise<null> {
    return await TAURI_INVOKE("delete_template", { id });
},
async getConfig() : Promise<Config> {
    return await TAURI_INVOKE("get_config");
},
async setConfig(config: Config) : Promise<null> {
    return await TAURI_INVOKE("set_config", { config });
},
async upsertHuman(human: Human) : Promise<Human> {
    return await TAURI_INVOKE("upsert_human", { human });
},
async getSelfHuman() : Promise<Human> {
    return await TAURI_INVOKE("get_self_human");
},
async getSelfOrganization() : Promise<Organization> {
    return await TAURI_INVOKE("get_self_organization");
},
async upsertOrganization(organization: Organization) : Promise<Organization> {
    return await TAURI_INVOKE("upsert_organization", { organization });
},
async listParticipants(eventId: string) : Promise<Human[]> {
    return await TAURI_INVOKE("list_participants", { eventId });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
recordingStarted: RecordingStarted,
recordingStopped: RecordingStopped
}>({
recordingStarted: "recording-started",
recordingStopped: "recording-stopped"
})

/** user-defined constants **/



/** user-defined types **/

export type Calendar = { id: string; tracking_id: string; user_id: string; platform: Platform; name: string; selected: boolean }
export type Config = { id: string; user_id: string; general: ConfigGeneral; notification: ConfigNotification }
export type ConfigGeneral = { autostart: boolean; speech_language: string; display_language: string; jargons: string[]; tags: string[] }
export type ConfigNotification = { before: boolean; auto: boolean }
export type ConversationChunk = { start: string; end: string; local_audio_path: string; remote_audio_path: string; transcripts: TranscriptChunk[]; diarizations: DiarizationChunk[] }
export type DiarizationChunk = { start: number; end: number; speaker: string }
export type EnhanceRequest = { pre_meeting_editor: string; in_meeting_editor: string; template: Template; config: Config; event: Event | null; participants: Human[]; timeline_view: TimelineView }
export type Event = { id: string; user_id: string; tracking_id: string; calendar_id: string; name: string; note: string; start_date: string; end_date: string; google_event_url: string | null }
export type Human = { id: string; organization_id: string | null; is_user: boolean; full_name: string | null; email: string | null; job_title: string | null; linkedin_username: string | null }
export type OSPermission = "calendar" | "contacts" | "audioRecording" | "screenRecording" | "microphone" | "accessibility"
export type Organization = { id: string; name: string; description: string | null }
export type Platform = "Apple" | "Google"
export type RecordingStarted = null
export type RecordingStopped = { path: string }
export type Session = { id: string; user_id: string; timestamp: string; calendar_event_id: string | null; title: string; audio_local_path: string | null; audio_remote_path: string | null; raw_memo_html: string; enhanced_memo_html: string | null; conversations: ConversationChunk[] }
export type SessionFilter = { id: string } | { calendarEventId: string } | { tagId: string }
export type SessionStatus = "Stopped" | { TimelineView: TimelineView }
export type ShowHyprWindow = "Demo" | "MainWithoutDemo" | "MainWithDemo"
export type Template = { id: string; user_id: string; title: string; description: string; sections: TemplateSection[]; tags: string[] }
export type TemplateSection = { title: string; description: string }
export type TimelineView = { items: TimelineViewItem[] }
export type TimelineViewItem = { start: number; end: number; speaker: string; text: string }
export type TranscriptChunk = { start: number; end: number; text: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
