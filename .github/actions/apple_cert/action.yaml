# https://github.com/tauri-apps/tauri-action/blob/3013cac/examples/publish-to-auto-release-universal-macos-app-with-signing-certificate.yml#L40-L61
# https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
# https://developer.apple.com/help/account/reference/certificate-types/

name: "Setup Apple Certificate"
description: "Import and verify Apple Developer Certificate for code signing"
inputs:
  apple-certificate:
    description: "Base64 encoded Apple certificate"
    required: true
  apple-certificate-password:
    description: "Password for the Apple certificate"
    required: true
  keychain-password:
    description: "Password for the temporary keychain"
    required: true
outputs:
  cert-id:
    description: "The certificate ID for signing"
    value: ${{ steps.verify-cert.outputs.cert-id }}
runs:
  using: "composite"
  steps:
    - name: Setup Certificate
      shell: bash
      run: |
        echo "${{ inputs.apple-certificate }}" | base64 --decode > certificate.p12
        security create-keychain -p "${{ inputs.keychain-password }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ inputs.keychain-password }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        security import certificate.p12 -k build.keychain -P "${{ inputs.apple-certificate-password }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ inputs.keychain-password }}" build.keychain
        security find-identity -v -p codesigning build.keychain

    - id: verify-cert
      shell: bash
      run: |
        CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
        CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
        echo "cert-id=$CERT_ID" >> $GITHUB_OUTPUT
        echo "Certificate imported."
