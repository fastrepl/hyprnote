/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as AppIndexRouteImport } from './routes/app.index'
import { Route as AppSettingsRouteImport } from './routes/app.settings'
import { Route as AppNoteRouteImport } from './routes/app.note'
import { Route as AppNewRouteImport } from './routes/app.new'
import { Route as AppFinderRouteImport } from './routes/app.finder'
import { Route as AppOrganizationIdRouteImport } from './routes/app.organization.$id'
import { Route as AppNoteIdRouteImport } from './routes/app.note.$id'
import { Route as AppHumanIdRouteImport } from './routes/app.human.$id'
import { Route as AppFinderCalendarRouteImport } from './routes/app.finder.calendar'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppNoteRoute = AppNoteRouteImport.update({
  id: '/note',
  path: '/note',
  getParentRoute: () => AppRoute,
} as any)
const AppNewRoute = AppNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRoute,
} as any)
const AppFinderRoute = AppFinderRouteImport.update({
  id: '/finder',
  path: '/finder',
  getParentRoute: () => AppRoute,
} as any)
const AppOrganizationIdRoute = AppOrganizationIdRouteImport.update({
  id: '/organization/$id',
  path: '/organization/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppNoteIdRoute = AppNoteIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AppNoteRoute,
} as any)
const AppHumanIdRoute = AppHumanIdRouteImport.update({
  id: '/human/$id',
  path: '/human/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppFinderCalendarRoute = AppFinderCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AppFinderRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/app/finder': typeof AppFinderRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/note': typeof AppNoteRouteWithChildren
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/app/finder/calendar': typeof AppFinderCalendarRoute
  '/app/human/$id': typeof AppHumanIdRoute
  '/app/note/$id': typeof AppNoteIdRoute
  '/app/organization/$id': typeof AppOrganizationIdRoute
}
export interface FileRoutesByTo {
  '/app/finder': typeof AppFinderRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/note': typeof AppNoteRouteWithChildren
  '/app/settings': typeof AppSettingsRoute
  '/app': typeof AppIndexRoute
  '/app/finder/calendar': typeof AppFinderCalendarRoute
  '/app/human/$id': typeof AppHumanIdRoute
  '/app/note/$id': typeof AppNoteIdRoute
  '/app/organization/$id': typeof AppOrganizationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/app': typeof AppRouteWithChildren
  '/app/finder': typeof AppFinderRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/note': typeof AppNoteRouteWithChildren
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/app/finder/calendar': typeof AppFinderCalendarRoute
  '/app/human/$id': typeof AppHumanIdRoute
  '/app/note/$id': typeof AppNoteIdRoute
  '/app/organization/$id': typeof AppOrganizationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/app/finder'
    | '/app/new'
    | '/app/note'
    | '/app/settings'
    | '/app/'
    | '/app/finder/calendar'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app/finder'
    | '/app/new'
    | '/app/note'
    | '/app/settings'
    | '/app'
    | '/app/finder/calendar'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
  id:
    | '__root__'
    | '/app'
    | '/app/finder'
    | '/app/new'
    | '/app/note'
    | '/app/settings'
    | '/app/'
    | '/app/finder/calendar'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/note': {
      id: '/app/note'
      path: '/note'
      fullPath: '/app/note'
      preLoaderRoute: typeof AppNoteRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/new': {
      id: '/app/new'
      path: '/new'
      fullPath: '/app/new'
      preLoaderRoute: typeof AppNewRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/finder': {
      id: '/app/finder'
      path: '/finder'
      fullPath: '/app/finder'
      preLoaderRoute: typeof AppFinderRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/organization/$id': {
      id: '/app/organization/$id'
      path: '/organization/$id'
      fullPath: '/app/organization/$id'
      preLoaderRoute: typeof AppOrganizationIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/note/$id': {
      id: '/app/note/$id'
      path: '/$id'
      fullPath: '/app/note/$id'
      preLoaderRoute: typeof AppNoteIdRouteImport
      parentRoute: typeof AppNoteRoute
    }
    '/app/human/$id': {
      id: '/app/human/$id'
      path: '/human/$id'
      fullPath: '/app/human/$id'
      preLoaderRoute: typeof AppHumanIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/finder/calendar': {
      id: '/app/finder/calendar'
      path: '/calendar'
      fullPath: '/app/finder/calendar'
      preLoaderRoute: typeof AppFinderCalendarRouteImport
      parentRoute: typeof AppFinderRoute
    }
  }
}

interface AppFinderRouteChildren {
  AppFinderCalendarRoute: typeof AppFinderCalendarRoute
}

const AppFinderRouteChildren: AppFinderRouteChildren = {
  AppFinderCalendarRoute: AppFinderCalendarRoute,
}

const AppFinderRouteWithChildren = AppFinderRoute._addFileChildren(
  AppFinderRouteChildren,
)

interface AppNoteRouteChildren {
  AppNoteIdRoute: typeof AppNoteIdRoute
}

const AppNoteRouteChildren: AppNoteRouteChildren = {
  AppNoteIdRoute: AppNoteIdRoute,
}

const AppNoteRouteWithChildren =
  AppNoteRoute._addFileChildren(AppNoteRouteChildren)

interface AppRouteChildren {
  AppFinderRoute: typeof AppFinderRouteWithChildren
  AppNewRoute: typeof AppNewRoute
  AppNoteRoute: typeof AppNoteRouteWithChildren
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
  AppHumanIdRoute: typeof AppHumanIdRoute
  AppOrganizationIdRoute: typeof AppOrganizationIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppFinderRoute: AppFinderRouteWithChildren,
  AppNewRoute: AppNewRoute,
  AppNoteRoute: AppNoteRouteWithChildren,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppHumanIdRoute: AppHumanIdRoute,
  AppOrganizationIdRoute: AppOrganizationIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
