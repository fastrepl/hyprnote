// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async setConfig(config: Config): Promise<void> {
    await TAURI_INVOKE("set_config", { config });
  },
  async getConfig(): Promise<Config> {
    return await TAURI_INVOKE("get_config");
  },
  async listAudioDevices(): Promise<string[]> {
    return await TAURI_INVOKE("list_audio_devices");
  },
  async startRecording(): Promise<null> {
    return await TAURI_INVOKE("start_recording");
  },
  async stopRecording(): Promise<void> {
    await TAURI_INVOKE("stop_recording");
  },
  async startPlayback(audioId: string): Promise<void> {
    await TAURI_INVOKE("start_playback", { audioId });
  },
  async stopPlayback(audioId: string): Promise<void> {
    await TAURI_INVOKE("stop_playback", { audioId });
  },
  async listAppleCalendars(): Promise<Calendar[] | null> {
    return await TAURI_INVOKE("list_apple_calendars");
  },
  async listAppleEvents(filter: EventFilter): Promise<Event[] | null> {
    return await TAURI_INVOKE("list_apple_events", { filter });
  },
  async openPermissionSettings(permission: OSPermission): Promise<void> {
    await TAURI_INVOKE("open_permission_settings", { permission });
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  transcript: Transcript;
}>({
  transcript: "transcript",
});

/** user-defined constants **/

/** user-defined types **/

export type Calendar = { title: string };
export type Config = ConfigV0;
export type ConfigV0 = {
  version: number;
  language: Language;
  user_name: string;
};
export type Event = { title: string; start_date: string; end_date: string };
export type EventFilter = {
  last_n_days: number | null;
  calendar_titles: string[];
};
export type Language = "English" | "Korean";
export type OSPermission =
  | "screenRecording"
  | "camera"
  | "microphone"
  | "accessibility";
export type Transcript = Record<string, never>;

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
