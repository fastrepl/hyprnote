// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async startMeetingAutomation(): Promise<null> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|start_meeting_automation",
    );
  },
  async stopMeetingAutomation(): Promise<null> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|stop_meeting_automation",
    );
  },
  async getAutomationStatus(): Promise<boolean> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|get_automation_status",
    );
  },
  async configureAutomation(config: AutomationConfig): Promise<null> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|configure_automation",
      { config },
    );
  },
  async getAutomationConfig(): Promise<AutomationConfig> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|get_automation_config",
    );
  },
  async testMeetingDetection(): Promise<null> {
    return await TAURI_INVOKE(
      "plugin:meeting-automation|test_meeting_detection",
    );
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type AutomationConfig = {
  enabled: boolean;
  auto_start_on_app_detection: boolean;
  auto_start_on_mic_activity: boolean;
  auto_stop_on_app_exit: boolean;
  auto_start_scheduled_meetings: boolean;
  require_window_focus: boolean;
  pre_meeting_notification_minutes: number;
  supported_apps: string[];
  notification_settings: NotificationSettings;
};
export type NotificationSettings = {
  show_meeting_started: boolean;
  show_meeting_ending: boolean;
  show_pre_meeting_reminder: boolean;
  show_recording_started: boolean;
  show_recording_stopped: boolean;
};

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
