/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as IndexImport } from "./routes/index";
import { Route as NoteNewImport } from "./routes/note.new";
import { Route as NoteIdImport } from "./routes/note.$id";
import { Route as CallbackConnectImport } from "./routes/callback.connect";

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const NoteNewRoute = NoteNewImport.update({
  id: "/note/new",
  path: "/note/new",
  getParentRoute: () => rootRoute,
} as any);

const NoteIdRoute = NoteIdImport.update({
  id: "/note/$id",
  path: "/note/$id",
  getParentRoute: () => rootRoute,
} as any);

const CallbackConnectRoute = CallbackConnectImport.update({
  id: "/callback/connect",
  path: "/callback/connect",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/callback/connect": {
      id: "/callback/connect";
      path: "/callback/connect";
      fullPath: "/callback/connect";
      preLoaderRoute: typeof CallbackConnectImport;
      parentRoute: typeof rootRoute;
    };
    "/note/$id": {
      id: "/note/$id";
      path: "/note/$id";
      fullPath: "/note/$id";
      preLoaderRoute: typeof NoteIdImport;
      parentRoute: typeof rootRoute;
    };
    "/note/new": {
      id: "/note/new";
      path: "/note/new";
      fullPath: "/note/new";
      preLoaderRoute: typeof NoteNewImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/callback/connect": typeof CallbackConnectRoute;
  "/note/$id": typeof NoteIdRoute;
  "/note/new": typeof NoteNewRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/callback/connect": typeof CallbackConnectRoute;
  "/note/$id": typeof NoteIdRoute;
  "/note/new": typeof NoteNewRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/callback/connect": typeof CallbackConnectRoute;
  "/note/$id": typeof NoteIdRoute;
  "/note/new": typeof NoteNewRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/login" | "/callback/connect" | "/note/$id" | "/note/new";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/login" | "/callback/connect" | "/note/$id" | "/note/new";
  id:
    | "__root__"
    | "/"
    | "/login"
    | "/callback/connect"
    | "/note/$id"
    | "/note/new";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LoginRoute: typeof LoginRoute;
  CallbackConnectRoute: typeof CallbackConnectRoute;
  NoteIdRoute: typeof NoteIdRoute;
  NoteNewRoute: typeof NoteNewRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  CallbackConnectRoute: CallbackConnectRoute,
  NoteIdRoute: NoteIdRoute,
  NoteNewRoute: NoteNewRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/callback/connect",
        "/note/$id",
        "/note/new"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/callback/connect": {
      "filePath": "callback.connect.tsx"
    },
    "/note/$id": {
      "filePath": "note.$id.tsx"
    },
    "/note/new": {
      "filePath": "note.new.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
