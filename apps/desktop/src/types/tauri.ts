// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async getEnv(name: string): Promise<string> {
    return await TAURI_INVOKE("get_env", { name });
  },
  async getFingerprint(): Promise<string> {
    return await TAURI_INVOKE("get_fingerprint");
  },
  async startSession(
    onEvent: TAURI_CHANNEL<TranscribeOutputChunk>,
  ): Promise<null> {
    return await TAURI_INVOKE("start_session", { onEvent });
  },
  async startPlayback(audioId: string): Promise<void> {
    await TAURI_INVOKE("start_playback", { audioId });
  },
  async stopPlayback(audioId: string): Promise<void> {
    await TAURI_INVOKE("stop_playback", { audioId });
  },
  async showWindow(window: ShowHyprWindow): Promise<void> {
    await TAURI_INVOKE("show_window", { window });
  },
  async createSession(): Promise<void> {
    await TAURI_INVOKE("create_session");
  },
  async runEnhance(
    req: EnhanceRequest,
    onEvent: TAURI_CHANNEL<string>,
  ): Promise<null> {
    return await TAURI_INVOKE("run_enhance", { req, onEvent });
  },
  async openPermissionSettings(permission: OSPermission): Promise<void> {
    await TAURI_INVOKE("open_permission_settings", { permission });
  },
  async checkPermissionStatus(
    permission: OSPermission,
  ): Promise<boolean | null> {
    return await TAURI_INVOKE("check_permission_status", { permission });
  },
  async dbUpsertCalendar(calendar: Calendar): Promise<Calendar> {
    return await TAURI_INVOKE("db_upsert_calendar", { calendar });
  },
  async dbListCalendars(): Promise<Calendar[]> {
    return await TAURI_INVOKE("db_list_calendars");
  },
  async dbListEvents(): Promise<Event[]> {
    return await TAURI_INVOKE("db_list_events");
  },
  async dbListSessions(search: string | null): Promise<Session[]> {
    return await TAURI_INVOKE("db_list_sessions", { search });
  },
  async dbListParticipants(filter: ParticipantFilter): Promise<Participant[]> {
    return await TAURI_INVOKE("db_list_participants", { filter });
  },
  async dbUpsertParticipant(participant: Participant): Promise<Participant> {
    return await TAURI_INVOKE("db_upsert_participant", { participant });
  },
  async dbGetSession(id: string): Promise<Session | null> {
    return await TAURI_INVOKE("db_get_session", { id });
  },
  async dbCreateSession(session: Session): Promise<Session> {
    return await TAURI_INVOKE("db_create_session", { session });
  },
  async dbSetSessionEvent(sessionId: string, eventId: string): Promise<null> {
    return await TAURI_INVOKE("db_set_session_event", { sessionId, eventId });
  },
  async dbListTemplates(): Promise<Template[]> {
    return await TAURI_INVOKE("db_list_templates");
  },
  async dbUpsertTemplate(template: Template): Promise<Template> {
    return await TAURI_INVOKE("db_upsert_template", { template });
  },
  async dbDeleteTemplate(id: string): Promise<null> {
    return await TAURI_INVOKE("db_delete_template", { id });
  },
  async dbGetConfig(kind: ConfigKind): Promise<Config | null> {
    return await TAURI_INVOKE("db_get_config", { kind });
  },
  async dbSetConfig(config: Config): Promise<null> {
    return await TAURI_INVOKE("db_set_config", { config });
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  recordingStarted: RecordingStarted;
  recordingStopped: RecordingStopped;
}>({
  recordingStarted: "recording-started",
  recordingStopped: "recording-stopped",
});

/** user-defined constants **/

/** user-defined types **/

export type Calendar = {
  id: string;
  tracking_id: string;
  platform: Platform;
  name: string;
  selected: boolean;
};
export type Config =
  | { type: "general"; data: ConfigDataGeneral }
  | { type: "profile"; data: ConfigDataProfile };
export type ConfigDataGeneral = {
  autostart: boolean;
  notifications: boolean;
  language: string;
  context: string;
};
export type ConfigDataProfile = {
  full_name: string | null;
  job_title: string | null;
  company_name: string | null;
  company_description: string | null;
  linkedin_username: string | null;
};
export type ConfigKind = "general" | "profile";
export type EnhanceRequest = {
  user: ConfigDataProfile;
  editor: JsonValue;
  template: Template;
};
export type Event = {
  id: string;
  tracking_id: string;
  calendar_id: string;
  name: string;
  note: string;
  start_date: string;
  end_date: string;
  google_event_url: string | null;
};
export type JsonValue =
  | null
  | boolean
  | number
  | string
  | JsonValue[]
  | { [key in string]: JsonValue };
export type OSPermission =
  | "calendar"
  | "contacts"
  | "audioRecording"
  | "screenRecording"
  | "microphone"
  | "accessibility";
export type Participant = {
  id: string;
  name: string;
  email: string | null;
  color_hex: string;
};
export type ParticipantFilter = { Text: string } | { Event: string } | "All";
export type Platform = "Apple" | "Google";
export type RecordingStarted = null;
export type RecordingStopped = { path: string };
export type Session = {
  id: string;
  timestamp: string;
  calendar_event_id: string | null;
  title: string;
  tags: string[];
  audio_local_path: string | null;
  audio_remote_path: string | null;
  raw_memo_html: string;
  enhanced_memo_html: string | null;
  transcript: Transcript | null;
};
export type ShowHyprWindow = "Demo" | "MainWithoutDemo" | "MainWithDemo";
export type Template = {
  id: string;
  title: string;
  description: string;
  sections: TemplateSection[];
};
export type TemplateSection = { title: string; description: string };
export type TranscribeOutputChunk = { text: string };
export type Transcript = { speakers: string[]; blocks: TranscriptBlock[] };
export type TranscriptBlock = {
  timestamp: string;
  text: string;
  speaker: string;
};

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
