// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetData, GetResponse, DeleteActiveData, DeleteActiveResponse, DeleteActiveError, GetActiveData, GetActiveResponse, PatchActiveData, PatchActiveError, PostActiveData, PostActiveResponse, PostActiveError, PutActiveData, PutActiveResponse, PutActiveError, GetCommandsData, GetCommandsResponse, PostCommandsByCommandIdData, PostCommandsByCommandIdResponse, PostCommandsByCommandIdError, PostOpenByFilenameData, DeletePeriodicByPeriodData, DeletePeriodicByPeriodResponse, DeletePeriodicByPeriodError, GetPeriodicByPeriodData, GetPeriodicByPeriodResponse, PatchPeriodicByPeriodData, PatchPeriodicByPeriodError, PostPeriodicByPeriodData, PostPeriodicByPeriodResponse, PostPeriodicByPeriodError, PutPeriodicByPeriodData, PutPeriodicByPeriodResponse, PutPeriodicByPeriodError, PostSearchData, PostSearchResponse, PostSearchError, PostSearchSimpleData, PostSearchSimpleResponse, GetVaultData, GetVaultResponse, GetVaultError, DeleteVaultByFilenameData, DeleteVaultByFilenameResponse, DeleteVaultByFilenameError, GetVaultByFilenameData, GetVaultByFilenameResponse, PatchVaultByFilenameData, PatchVaultByFilenameError, PostVaultByFilenameData, PostVaultByFilenameResponse, PostVaultByFilenameError, PutVaultByFilenameData, PutVaultByFilenameResponse, PutVaultByFilenameError, GetVaultByPathToDirectoryData, GetVaultByPathToDirectoryResponse, GetVaultByPathToDirectoryError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns basic details about the server.
 *
 * Returns basic details about the server as well as your authentication status.
 *
 * This is the only API request that does *not* require authentication.
 *
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/',
        ...options
    });
};

/**
 * Deletes the currently-active file in Obsidian.
 *
 */
export const deleteActive = <ThrowOnError extends boolean = false>(options?: Options<DeleteActiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteActiveResponse, DeleteActiveError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/active/',
        ...options
    });
};

/**
 * Return the content of the active file open in Obsidian.
 *
 * Returns the content of the currently active file in Obsidian.
 *
 * If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.
 *
 */
export const getActive = <ThrowOnError extends boolean = false>(options?: Options<GetActiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetActiveResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/active/',
        ...options
    });
};

/**
 * Insert content into the currently open note in Obsidian relative to a heading within that document.
 *
 * Inserts content into the currently-open note relative to a heading within that note.
 *
 * Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.
 *
 * Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.
 *
 * # Examples
 *
 * All of the below examples assume you have a document that looks like
 * this:
 *
 * ```markdown
 * ---
 * alpha: 1
 * beta: test
 * delta:
 * zeta: 1
 * yotta: 1
 * gamma:
 * - one
 * - two
 * ---
 *
 * # Heading 1
 *
 * This is the content for heading one
 *
 * Also references some [[#^484ef2]]
 *
 * ## Subheading 1:1
 * Content for Subheading 1:1
 *
 * ### Subsubheading 1:1:1
 *
 * ### Subsubheading 1:1:2
 *
 * Testing how block references work for a table.[[#^2c7cfa]]
 * Some content for Subsubheading 1:1:2
 *
 * More random text.
 *
 * ^2d9b4a
 *
 * ## Subheading 1:2
 *
 * Content for Subheading 1:2.
 *
 * some content with a block reference ^484ef2
 *
 * ## Subheading 1:3
 * | City         | Population |
 * | ------------ | ---------- |
 * | Seattle, WA  | 8          |
 * | Portland, OR | 4          |
 *
 * ^2c7cfa
 * ```
 *
 * ## Append Content Below a Heading
 *
 * If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",
 * you could send a request with the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `heading`
 * - `Target`: `Heading 1::Subheading 1:1:1`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Append Content to a Block Reference
 *
 * If you wanted to append the content "Hello" below the block referenced by
 * "2d9b4a" above ("More random text."), you could send the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `block`
 * - `Target`: `2d9b4a`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Add a Row to a Table Referenced by a Block Reference
 *
 * If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above
 * referenced by the block reference `2c7cfa`, you could send the following
 * headers:
 *
 * - `Operation`: `append`
 * - `TargetType`: `block`
 * - `Target`: `2c7cfa`
 * - `Content-Type`: `application/json`
 * - with the request body: `[["Chicago, IL", "16"]]`
 *
 * The use of a `Content-Type` of `application/json` allows the API
 * to infer that member of your array represents rows and columns of your
 * to append to the referenced table.  You can of course just use a
 * `Content-Type` of `text/markdown`, but in such a case you'll have to
 * format your table row manually instead of letting the library figure
 * it out for you.
 *
 * You also have the option of using `prepend` (in which case, your new
 * row would be the first -- right below the table heading) or `replace` (in which
 * case all rows except the table heading would be replaced by the new row(s)
 * you supplied).
 *
 * ## Setting a Frontmatter Field
 *
 * If you wanted to set the frontmatter field `alpha` to `2`, you could
 * send the following headers:
 *
 * - `Operation`: `replace`
 * - `TargetType`: `frontmatter`
 * - `Target`: `beep`
 * - with the request body `2`
 *
 * If you're setting a frontmatter field that might not already exist
 * you may want to use the `Create-Target-If-Missing` header so the
 * new frontmatter field is created and set to your specified value
 * if it doesn't already exist.
 *
 * You may find using a `Content-Type` of `application/json` to be
 * particularly useful in the case of frontmatter since frontmatter
 * fields' values are JSON data, and the API can be smarter about
 * interpreting yoru `prepend` or `append` requests if you specify
 * your data as JSON (particularly when appending, for example,
 * list items).
 *
 */
export const patchActive = <ThrowOnError extends boolean = false>(options: Options<PatchActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, PatchActiveError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/active/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Append content to the active file open in Obsidian.
 *
 * Appends content to the end of the currently-open note.
 *
 * If you would like to insert text relative to a particular heading instead of appending to the end of the file, see 'patch'.
 *
 */
export const postActive = <ThrowOnError extends boolean = false>(options: Options<PostActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostActiveResponse, PostActiveError, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/active/',
        ...options,
        headers: {
            'Content-Type': 'text/markdown',
            ...options?.headers
        }
    });
};

/**
 * Update the content of the active file open in Obsidian.
 *
 */
export const putActive = <ThrowOnError extends boolean = false>(options: Options<PutActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutActiveResponse, PutActiveError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/active/',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options?.headers
        }
    });
};

/**
 * Get a list of available commands.
 *
 */
export const getCommands = <ThrowOnError extends boolean = false>(options?: Options<GetCommandsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommandsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commands/',
        ...options
    });
};

/**
 * Execute a command.
 *
 */
export const postCommandsByCommandId = <ThrowOnError extends boolean = false>(options: Options<PostCommandsByCommandIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCommandsByCommandIdResponse, PostCommandsByCommandIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commands/{commandId}/',
        ...options
    });
};

/**
 * Open the specified document in Obsidian
 *
 * Opens the specified document in Obsidian.
 *
 * Note: Obsidian will create a new document at the path you have
 * specified if such a document did not already exist.
 *
 */
export const postOpenByFilename = <ThrowOnError extends boolean = false>(options: Options<PostOpenByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/open/{filename}',
        ...options
    });
};

/**
 * Delete a periodic note.
 *
 * Deletes the periodic note for the specified period.
 *
 */
export const deletePeriodicByPeriod = <ThrowOnError extends boolean = false>(options: Options<DeletePeriodicByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePeriodicByPeriodResponse, DeletePeriodicByPeriodError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/periodic/{period}/',
        ...options
    });
};

/**
 * Get current periodic note for the specified period.
 *
 */
export const getPeriodicByPeriod = <ThrowOnError extends boolean = false>(options: Options<GetPeriodicByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPeriodicByPeriodResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/periodic/{period}/',
        ...options
    });
};

/**
 * Insert content into a periodic note relative to a heading within that document.
 *
 * Inserts content into an existing note relative to a heading within your note.
 *
 * Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.
 *
 * Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.
 *
 * # Examples
 *
 * All of the below examples assume you have a document that looks like
 * this:
 *
 * ```markdown
 * ---
 * alpha: 1
 * beta: test
 * delta:
 * zeta: 1
 * yotta: 1
 * gamma:
 * - one
 * - two
 * ---
 *
 * # Heading 1
 *
 * This is the content for heading one
 *
 * Also references some [[#^484ef2]]
 *
 * ## Subheading 1:1
 * Content for Subheading 1:1
 *
 * ### Subsubheading 1:1:1
 *
 * ### Subsubheading 1:1:2
 *
 * Testing how block references work for a table.[[#^2c7cfa]]
 * Some content for Subsubheading 1:1:2
 *
 * More random text.
 *
 * ^2d9b4a
 *
 * ## Subheading 1:2
 *
 * Content for Subheading 1:2.
 *
 * some content with a block reference ^484ef2
 *
 * ## Subheading 1:3
 * | City         | Population |
 * | ------------ | ---------- |
 * | Seattle, WA  | 8          |
 * | Portland, OR | 4          |
 *
 * ^2c7cfa
 * ```
 *
 * ## Append Content Below a Heading
 *
 * If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",
 * you could send a request with the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `heading`
 * - `Target`: `Heading 1::Subheading 1:1:1`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Append Content to a Block Reference
 *
 * If you wanted to append the content "Hello" below the block referenced by
 * "2d9b4a" above ("More random text."), you could send the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `block`
 * - `Target`: `2d9b4a`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Add a Row to a Table Referenced by a Block Reference
 *
 * If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above
 * referenced by the block reference `2c7cfa`, you could send the following
 * headers:
 *
 * - `Operation`: `append`
 * - `TargetType`: `block`
 * - `Target`: `2c7cfa`
 * - `Content-Type`: `application/json`
 * - with the request body: `[["Chicago, IL", "16"]]`
 *
 * The use of a `Content-Type` of `application/json` allows the API
 * to infer that member of your array represents rows and columns of your
 * to append to the referenced table.  You can of course just use a
 * `Content-Type` of `text/markdown`, but in such a case you'll have to
 * format your table row manually instead of letting the library figure
 * it out for you.
 *
 * You also have the option of using `prepend` (in which case, your new
 * row would be the first -- right below the table heading) or `replace` (in which
 * case all rows except the table heading would be replaced by the new row(s)
 * you supplied).
 *
 * ## Setting a Frontmatter Field
 *
 * If you wanted to set the frontmatter field `alpha` to `2`, you could
 * send the following headers:
 *
 * - `Operation`: `replace`
 * - `TargetType`: `frontmatter`
 * - `Target`: `beep`
 * - with the request body `2`
 *
 * If you're setting a frontmatter field that might not already exist
 * you may want to use the `Create-Target-If-Missing` header so the
 * new frontmatter field is created and set to your specified value
 * if it doesn't already exist.
 *
 * You may find using a `Content-Type` of `application/json` to be
 * particularly useful in the case of frontmatter since frontmatter
 * fields' values are JSON data, and the API can be smarter about
 * interpreting yoru `prepend` or `append` requests if you specify
 * your data as JSON (particularly when appending, for example,
 * list items).
 *
 */
export const patchPeriodicByPeriod = <ThrowOnError extends boolean = false>(options: Options<PatchPeriodicByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, PatchPeriodicByPeriodError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/periodic/{period}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Append content to a periodic note.
 *
 * Appends content to the periodic note for the specified period.  This will create the relevant periodic note if necessary.
 *
 */
export const postPeriodicByPeriod = <ThrowOnError extends boolean = false>(options: Options<PostPeriodicByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPeriodicByPeriodResponse, PostPeriodicByPeriodError, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/periodic/{period}/',
        ...options,
        headers: {
            'Content-Type': 'text/markdown',
            ...options?.headers
        }
    });
};

/**
 * Update the content of a periodic note.
 *
 */
export const putPeriodicByPeriod = <ThrowOnError extends boolean = false>(options: Options<PutPeriodicByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPeriodicByPeriodResponse, PutPeriodicByPeriodError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/periodic/{period}/',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options?.headers
        }
    });
};

/**
 * Search for documents matching a specified search query
 *
 * Evaluates a provided query against each file in your vault.
 *
 * This endpoint supports multiple query formats.  Your query should be specified in your request's body, and will be interpreted according to the `Content-type` header you specify from the below options.Additional query formats may be added in the future.
 *
 * # Dataview DQL (`application/vnd.olrapi.dataview.dql+txt`)
 *
 * Accepts a `TABLE`-type Dataview query as a text string.  See [Dataview](https://blacksmithgu.github.io/obsidian-dataview/query/queries/)'s query documentation for information on how to construct a query.
 *
 * # JsonLogic (`application/vnd.olrapi.jsonlogic+json`)
 *
 * Accepts a JsonLogic query specified as JSON.  See [JsonLogic](https://jsonlogic.com/operations.html)'s documentation for information about the base set of operators available, but in addition to those operators the following operators are available:
 *
 * - `glob: [PATTERN, VALUE]`: Returns `true` if a string matches a glob pattern.  E.g.: `{"glob": ["*.foo", "bar.foo"]}` is `true` and `{"glob": ["*.bar", "bar.foo"]}` is `false`.
 * - `regexp: [PATTERN, VALUE]`: Returns `true` if a string matches a regular expression.  E.g.: `{"regexp": [".*\.foo", "bar.foo"]` is `true` and `{"regexp": [".*\.bar", "bar.foo"]}` is `false`.
 *
 * Returns only non-falsy results.  "Non-falsy" here treats the following values as "falsy":
 *
 * - `false`
 * - `null` or `undefined`
 * - `0`
 * - `[]`
 * - `{}`
 *
 * Files are represented as an object having the schema described
 * in the Schema named 'NoteJson' at the bottom of this page.
 * Understanding the shape of a JSON object from a schema can be
 * tricky; so you may find it helpful to examine the generated metadata
 * for individual files in your vault to understand exactly what values
 * are returned.  To see that, access the `GET` `/vault/{filePath}`
 * route setting the header:
 * `Accept: application/vnd.olrapi.note+json`.  See examples below
 * for working examples of queries performing common search operations.
 *
 */
export const postSearch = <ThrowOnError extends boolean = false>(options: Options<PostSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSearchResponse, PostSearchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search/',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.olrapi.dataview.dql+txt',
            ...options?.headers
        }
    });
};

/**
 * Search for documents matching a specified text query
 *
 */
export const postSearchSimple = <ThrowOnError extends boolean = false>(options: Options<PostSearchSimpleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSearchSimpleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search/simple/',
        ...options
    });
};

/**
 * List files that exist in the root of your vault.
 *
 * Lists files in the root directory of your vault.
 *
 * Note: that this is exactly the same API endpoint as the below "List files that exist in the specified directory." and exists here only due to a quirk of this particular interactive tool.
 *
 */
export const getVault = <ThrowOnError extends boolean = false>(options?: Options<GetVaultData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVaultResponse, GetVaultError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/',
        ...options
    });
};

/**
 * Delete a particular file in your vault.
 *
 */
export const deleteVaultByFilename = <ThrowOnError extends boolean = false>(options: Options<DeleteVaultByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVaultByFilenameResponse, DeleteVaultByFilenameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{filename}',
        ...options
    });
};

/**
 * Return the content of a single file in your vault.
 *
 * Returns the content of the file at the specified path in your vault should the file exist.
 *
 * If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.
 *
 */
export const getVaultByFilename = <ThrowOnError extends boolean = false>(options: Options<GetVaultByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVaultByFilenameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{filename}',
        ...options
    });
};

/**
 * Insert content into an existing note relative to a heading within that document.
 *
 * Inserts content into an existing note relative to a heading within your note.
 *
 * Allows you to modify the content relative to a heading, block reference, or frontmatter field in your document.
 *
 * Note that this API was changed in Version 3.0 of this extension and the earlier PATCH API is now deprecated. Requests made using the previous version of this API will continue to work until Version 4.0 is released.  See https://github.com/coddingtonbear/obsidian-local-rest-api/wiki/Changes-to-PATCH-requests-between-versions-2.0-and-3.0 for more details and migration instructions.
 *
 * # Examples
 *
 * All of the below examples assume you have a document that looks like
 * this:
 *
 * ```markdown
 * ---
 * alpha: 1
 * beta: test
 * delta:
 * zeta: 1
 * yotta: 1
 * gamma:
 * - one
 * - two
 * ---
 *
 * # Heading 1
 *
 * This is the content for heading one
 *
 * Also references some [[#^484ef2]]
 *
 * ## Subheading 1:1
 * Content for Subheading 1:1
 *
 * ### Subsubheading 1:1:1
 *
 * ### Subsubheading 1:1:2
 *
 * Testing how block references work for a table.[[#^2c7cfa]]
 * Some content for Subsubheading 1:1:2
 *
 * More random text.
 *
 * ^2d9b4a
 *
 * ## Subheading 1:2
 *
 * Content for Subheading 1:2.
 *
 * some content with a block reference ^484ef2
 *
 * ## Subheading 1:3
 * | City         | Population |
 * | ------------ | ---------- |
 * | Seattle, WA  | 8          |
 * | Portland, OR | 4          |
 *
 * ^2c7cfa
 * ```
 *
 * ## Append Content Below a Heading
 *
 * If you wanted to append the content "Hello" below "Subheading 1:1:1" under "Heading 1",
 * you could send a request with the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `heading`
 * - `Target`: `Heading 1::Subheading 1:1:1`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Append Content to a Block Reference
 *
 * If you wanted to append the content "Hello" below the block referenced by
 * "2d9b4a" above ("More random text."), you could send the following headers:
 *
 * - `Operation`: `append`
 * - `Target-Type`: `block`
 * - `Target`: `2d9b4a`
 * - with the request body: `Hello`
 *
 * The above would work just fine for `prepend` or `replace`, too, of course,
 * but with different results.
 *
 * ## Add a Row to a Table Referenced by a Block Reference
 *
 * If you wanted to add a new city ("Chicago, IL") and population ("16") pair to the table above
 * referenced by the block reference `2c7cfa`, you could send the following
 * headers:
 *
 * - `Operation`: `append`
 * - `TargetType`: `block`
 * - `Target`: `2c7cfa`
 * - `Content-Type`: `application/json`
 * - with the request body: `[["Chicago, IL", "16"]]`
 *
 * The use of a `Content-Type` of `application/json` allows the API
 * to infer that member of your array represents rows and columns of your
 * to append to the referenced table.  You can of course just use a
 * `Content-Type` of `text/markdown`, but in such a case you'll have to
 * format your table row manually instead of letting the library figure
 * it out for you.
 *
 * You also have the option of using `prepend` (in which case, your new
 * row would be the first -- right below the table heading) or `replace` (in which
 * case all rows except the table heading would be replaced by the new row(s)
 * you supplied).
 *
 * ## Setting a Frontmatter Field
 *
 * If you wanted to set the frontmatter field `alpha` to `2`, you could
 * send the following headers:
 *
 * - `Operation`: `replace`
 * - `TargetType`: `frontmatter`
 * - `Target`: `beep`
 * - with the request body `2`
 *
 * If you're setting a frontmatter field that might not already exist
 * you may want to use the `Create-Target-If-Missing` header so the
 * new frontmatter field is created and set to your specified value
 * if it doesn't already exist.
 *
 * You may find using a `Content-Type` of `application/json` to be
 * particularly useful in the case of frontmatter since frontmatter
 * fields' values are JSON data, and the API can be smarter about
 * interpreting yoru `prepend` or `append` requests if you specify
 * your data as JSON (particularly when appending, for example,
 * list items).
 *
 */
export const patchVaultByFilename = <ThrowOnError extends boolean = false>(options: Options<PatchVaultByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, PatchVaultByFilenameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{filename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Append content to a new or existing file.
 *
 * Appends content to the end of an existing note. If the specified file does not yet exist, it will be created as an empty file.
 *
 * If you would like to insert text relative to a particular heading instead of appending to the end of the file, see 'patch'.
 *
 */
export const postVaultByFilename = <ThrowOnError extends boolean = false>(options: Options<PostVaultByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostVaultByFilenameResponse, PostVaultByFilenameError, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{filename}',
        ...options,
        headers: {
            'Content-Type': 'text/markdown',
            ...options?.headers
        }
    });
};

/**
 * Create a new file in your vault or update the content of an existing one.
 *
 * Creates a new file in your vault or updates the content of an existing one if the specified file already exists.
 *
 */
export const putVaultByFilename = <ThrowOnError extends boolean = false>(options: Options<PutVaultByFilenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutVaultByFilenameResponse, PutVaultByFilenameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{filename}',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options?.headers
        }
    });
};

/**
 * List files that exist in the specified directory.
 *
 */
export const getVaultByPathToDirectory = <ThrowOnError extends boolean = false>(options: Options<GetVaultByPathToDirectoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVaultByPathToDirectoryResponse, GetVaultByPathToDirectoryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vault/{pathToDirectory}/',
        ...options
    });
};