/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SettingsImport } from "./routes/settings";
import { Route as IndexImport } from "./routes/index";
import { Route as NotesIdImport } from "./routes/notes.$id";
import { Route as AuthSignUpImport } from "./routes/auth.sign-up";
import { Route as AuthSignOutImport } from "./routes/auth.sign-out";
import { Route as AuthSignInImport } from "./routes/auth.sign-in";
import { Route as AuthConnectIndexImport } from "./routes/auth.connect.index";
import { Route as AuthConnectSuccessImport } from "./routes/auth.connect.success";
import { Route as AuthConnectFailedImport } from "./routes/auth.connect.failed";

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const NotesIdRoute = NotesIdImport.update({
  id: "/notes/$id",
  path: "/notes/$id",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignUpRoute = AuthSignUpImport.update({
  id: "/auth/sign-up",
  path: "/auth/sign-up",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignOutRoute = AuthSignOutImport.update({
  id: "/auth/sign-out",
  path: "/auth/sign-out",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignInRoute = AuthSignInImport.update({
  id: "/auth/sign-in",
  path: "/auth/sign-in",
  getParentRoute: () => rootRoute,
} as any);

const AuthConnectIndexRoute = AuthConnectIndexImport.update({
  id: "/auth/connect/",
  path: "/auth/connect/",
  getParentRoute: () => rootRoute,
} as any);

const AuthConnectSuccessRoute = AuthConnectSuccessImport.update({
  id: "/auth/connect/success",
  path: "/auth/connect/success",
  getParentRoute: () => rootRoute,
} as any);

const AuthConnectFailedRoute = AuthConnectFailedImport.update({
  id: "/auth/connect/failed",
  path: "/auth/connect/failed",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-in": {
      id: "/auth/sign-in";
      path: "/auth/sign-in";
      fullPath: "/auth/sign-in";
      preLoaderRoute: typeof AuthSignInImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-out": {
      id: "/auth/sign-out";
      path: "/auth/sign-out";
      fullPath: "/auth/sign-out";
      preLoaderRoute: typeof AuthSignOutImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/sign-up": {
      id: "/auth/sign-up";
      path: "/auth/sign-up";
      fullPath: "/auth/sign-up";
      preLoaderRoute: typeof AuthSignUpImport;
      parentRoute: typeof rootRoute;
    };
    "/notes/$id": {
      id: "/notes/$id";
      path: "/notes/$id";
      fullPath: "/notes/$id";
      preLoaderRoute: typeof NotesIdImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/connect/failed": {
      id: "/auth/connect/failed";
      path: "/auth/connect/failed";
      fullPath: "/auth/connect/failed";
      preLoaderRoute: typeof AuthConnectFailedImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/connect/success": {
      id: "/auth/connect/success";
      path: "/auth/connect/success";
      fullPath: "/auth/connect/success";
      preLoaderRoute: typeof AuthConnectSuccessImport;
      parentRoute: typeof rootRoute;
    };
    "/auth/connect/": {
      id: "/auth/connect/";
      path: "/auth/connect";
      fullPath: "/auth/connect";
      preLoaderRoute: typeof AuthConnectIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/settings": typeof SettingsRoute;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/notes/$id": typeof NotesIdRoute;
  "/auth/connect/failed": typeof AuthConnectFailedRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
  "/auth/connect": typeof AuthConnectIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/settings": typeof SettingsRoute;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/notes/$id": typeof NotesIdRoute;
  "/auth/connect/failed": typeof AuthConnectFailedRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
  "/auth/connect": typeof AuthConnectIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/settings": typeof SettingsRoute;
  "/auth/sign-in": typeof AuthSignInRoute;
  "/auth/sign-out": typeof AuthSignOutRoute;
  "/auth/sign-up": typeof AuthSignUpRoute;
  "/notes/$id": typeof NotesIdRoute;
  "/auth/connect/failed": typeof AuthConnectFailedRoute;
  "/auth/connect/success": typeof AuthConnectSuccessRoute;
  "/auth/connect/": typeof AuthConnectIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/settings"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/notes/$id"
    | "/auth/connect/failed"
    | "/auth/connect/success"
    | "/auth/connect";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/settings"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/notes/$id"
    | "/auth/connect/failed"
    | "/auth/connect/success"
    | "/auth/connect";
  id:
    | "__root__"
    | "/"
    | "/settings"
    | "/auth/sign-in"
    | "/auth/sign-out"
    | "/auth/sign-up"
    | "/notes/$id"
    | "/auth/connect/failed"
    | "/auth/connect/success"
    | "/auth/connect/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  SettingsRoute: typeof SettingsRoute;
  AuthSignInRoute: typeof AuthSignInRoute;
  AuthSignOutRoute: typeof AuthSignOutRoute;
  AuthSignUpRoute: typeof AuthSignUpRoute;
  NotesIdRoute: typeof NotesIdRoute;
  AuthConnectFailedRoute: typeof AuthConnectFailedRoute;
  AuthConnectSuccessRoute: typeof AuthConnectSuccessRoute;
  AuthConnectIndexRoute: typeof AuthConnectIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  NotesIdRoute: NotesIdRoute,
  AuthConnectFailedRoute: AuthConnectFailedRoute,
  AuthConnectSuccessRoute: AuthConnectSuccessRoute,
  AuthConnectIndexRoute: AuthConnectIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/auth/sign-in",
        "/auth/sign-out",
        "/auth/sign-up",
        "/notes/$id",
        "/auth/connect/failed",
        "/auth/connect/success",
        "/auth/connect/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx"
    },
    "/auth/sign-out": {
      "filePath": "auth.sign-out.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx"
    },
    "/notes/$id": {
      "filePath": "notes.$id.tsx"
    },
    "/auth/connect/failed": {
      "filePath": "auth.connect.failed.tsx"
    },
    "/auth/connect/success": {
      "filePath": "auth.connect.success.tsx"
    },
    "/auth/connect/": {
      "filePath": "auth.connect.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
