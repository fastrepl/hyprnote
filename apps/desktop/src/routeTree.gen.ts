/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as NavImport } from './routes/_nav'
import { Route as NavIndexImport } from './routes/_nav.index'
import { Route as NoteNewImport } from './routes/note.new'
import { Route as CallbackConnectImport } from './routes/callback.connect'
import { Route as NavOnboardingImport } from './routes/_nav.onboarding'
import { Route as NavOnboardingIndexImport } from './routes/_nav.onboarding.index'
import { Route as NavNoteIdImport } from './routes/_nav.note.$id'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const NavRoute = NavImport.update({
  id: '/_nav',
  getParentRoute: () => rootRoute,
} as any)

const NavIndexRoute = NavIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NavRoute,
} as any)

const NoteNewRoute = NoteNewImport.update({
  id: '/note/new',
  path: '/note/new',
  getParentRoute: () => rootRoute,
} as any)

const CallbackConnectRoute = CallbackConnectImport.update({
  id: '/callback/connect',
  path: '/callback/connect',
  getParentRoute: () => rootRoute,
} as any)

const NavOnboardingRoute = NavOnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => NavRoute,
} as any)

const NavOnboardingIndexRoute = NavOnboardingIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NavOnboardingRoute,
} as any)

const NavNoteIdRoute = NavNoteIdImport.update({
  id: '/note/$id',
  path: '/note/$id',
  getParentRoute: () => NavRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_nav': {
      id: '/_nav'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NavImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_nav/onboarding': {
      id: '/_nav/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof NavOnboardingImport
      parentRoute: typeof NavImport
    }
    '/callback/connect': {
      id: '/callback/connect'
      path: '/callback/connect'
      fullPath: '/callback/connect'
      preLoaderRoute: typeof CallbackConnectImport
      parentRoute: typeof rootRoute
    }
    '/note/new': {
      id: '/note/new'
      path: '/note/new'
      fullPath: '/note/new'
      preLoaderRoute: typeof NoteNewImport
      parentRoute: typeof rootRoute
    }
    '/_nav/': {
      id: '/_nav/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof NavIndexImport
      parentRoute: typeof NavImport
    }
    '/_nav/note/$id': {
      id: '/_nav/note/$id'
      path: '/note/$id'
      fullPath: '/note/$id'
      preLoaderRoute: typeof NavNoteIdImport
      parentRoute: typeof NavImport
    }
    '/_nav/onboarding/': {
      id: '/_nav/onboarding/'
      path: '/'
      fullPath: '/onboarding/'
      preLoaderRoute: typeof NavOnboardingIndexImport
      parentRoute: typeof NavOnboardingImport
    }
  }
}

// Create and export the route tree

interface NavOnboardingRouteChildren {
  NavOnboardingIndexRoute: typeof NavOnboardingIndexRoute
}

const NavOnboardingRouteChildren: NavOnboardingRouteChildren = {
  NavOnboardingIndexRoute: NavOnboardingIndexRoute,
}

const NavOnboardingRouteWithChildren = NavOnboardingRoute._addFileChildren(
  NavOnboardingRouteChildren,
)

interface NavRouteChildren {
  NavOnboardingRoute: typeof NavOnboardingRouteWithChildren
  NavIndexRoute: typeof NavIndexRoute
  NavNoteIdRoute: typeof NavNoteIdRoute
}

const NavRouteChildren: NavRouteChildren = {
  NavOnboardingRoute: NavOnboardingRouteWithChildren,
  NavIndexRoute: NavIndexRoute,
  NavNoteIdRoute: NavNoteIdRoute,
}

const NavRouteWithChildren = NavRoute._addFileChildren(NavRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof NavRouteWithChildren
  '/login': typeof LoginRoute
  '/onboarding': typeof NavOnboardingRouteWithChildren
  '/callback/connect': typeof CallbackConnectRoute
  '/note/new': typeof NoteNewRoute
  '/': typeof NavIndexRoute
  '/note/$id': typeof NavNoteIdRoute
  '/onboarding/': typeof NavOnboardingIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/callback/connect': typeof CallbackConnectRoute
  '/note/new': typeof NoteNewRoute
  '/': typeof NavIndexRoute
  '/note/$id': typeof NavNoteIdRoute
  '/onboarding': typeof NavOnboardingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_nav': typeof NavRouteWithChildren
  '/login': typeof LoginRoute
  '/_nav/onboarding': typeof NavOnboardingRouteWithChildren
  '/callback/connect': typeof CallbackConnectRoute
  '/note/new': typeof NoteNewRoute
  '/_nav/': typeof NavIndexRoute
  '/_nav/note/$id': typeof NavNoteIdRoute
  '/_nav/onboarding/': typeof NavOnboardingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/onboarding'
    | '/callback/connect'
    | '/note/new'
    | '/'
    | '/note/$id'
    | '/onboarding/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/callback/connect'
    | '/note/new'
    | '/'
    | '/note/$id'
    | '/onboarding'
  id:
    | '__root__'
    | '/_nav'
    | '/login'
    | '/_nav/onboarding'
    | '/callback/connect'
    | '/note/new'
    | '/_nav/'
    | '/_nav/note/$id'
    | '/_nav/onboarding/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  NavRoute: typeof NavRouteWithChildren
  LoginRoute: typeof LoginRoute
  CallbackConnectRoute: typeof CallbackConnectRoute
  NoteNewRoute: typeof NoteNewRoute
}

const rootRouteChildren: RootRouteChildren = {
  NavRoute: NavRouteWithChildren,
  LoginRoute: LoginRoute,
  CallbackConnectRoute: CallbackConnectRoute,
  NoteNewRoute: NoteNewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_nav",
        "/login",
        "/callback/connect",
        "/note/new"
      ]
    },
    "/_nav": {
      "filePath": "_nav.tsx",
      "children": [
        "/_nav/onboarding",
        "/_nav/",
        "/_nav/note/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_nav/onboarding": {
      "filePath": "_nav.onboarding.tsx",
      "parent": "/_nav",
      "children": [
        "/_nav/onboarding/"
      ]
    },
    "/callback/connect": {
      "filePath": "callback.connect.tsx"
    },
    "/note/new": {
      "filePath": "note.new.tsx"
    },
    "/_nav/": {
      "filePath": "_nav.index.tsx",
      "parent": "/_nav"
    },
    "/_nav/note/$id": {
      "filePath": "_nav.note.$id.tsx",
      "parent": "/_nav"
    },
    "/_nav/onboarding/": {
      "filePath": "_nav.onboarding.index.tsx",
      "parent": "/_nav/onboarding"
    }
  }
}
ROUTE_MANIFEST_END */
