/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/app'
import { Route as AppIndexImport } from './routes/app.index'
import { Route as AppHomeImport } from './routes/app.home'
import { Route as AppNoteIdMainImport } from './routes/app.note.$id.main'

// Create/Update Routes

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppHomeRoute = AppHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)

const AppNoteIdMainRoute = AppNoteIdMainImport.update({
  id: '/note/$id/main',
  path: '/note/$id/main',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/app/home': {
      id: '/app/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppHomeImport
      parentRoute: typeof AppImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/app/note/$id/main': {
      id: '/app/note/$id/main'
      path: '/note/$id/main'
      fullPath: '/app/note/$id/main'
      preLoaderRoute: typeof AppNoteIdMainImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppIndexRoute: typeof AppIndexRoute
  AppNoteIdMainRoute: typeof AppNoteIdMainRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppIndexRoute: AppIndexRoute,
  AppNoteIdMainRoute: AppNoteIdMainRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/home': typeof AppHomeRoute
  '/app/': typeof AppIndexRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/home': typeof AppHomeRoute
  '/app': typeof AppIndexRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/home': typeof AppHomeRoute
  '/app/': typeof AppIndexRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/login'
    | '/onboarding'
    | '/app/home'
    | '/app/'
    | '/app/note/$id/main'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/onboarding' | '/app/home' | '/app' | '/app/note/$id/main'
  id:
    | '__root__'
    | '/app'
    | '/login'
    | '/onboarding'
    | '/app/home'
    | '/app/'
    | '/app/note/$id/main'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  OnboardingRoute: typeof OnboardingRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  OnboardingRoute: OnboardingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/login",
        "/onboarding"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/home",
        "/app/",
        "/app/note/$id/main"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/app/home": {
      "filePath": "app.home.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app.index.tsx",
      "parent": "/app"
    },
    "/app/note/$id/main": {
      "filePath": "app.note.$id.main.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
