/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiSyncWriteRouteImport } from './routes/api/sync.write'
import { Route as ApiSyncReadRouteImport } from './routes/api/sync.read'
import { Route as ApiChatCompletionsRouteImport } from './routes/api/chat.completions'
import { Route as ApiCallbackAuthRouteImport } from './routes/api/callback.auth'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSyncWriteRoute = ApiSyncWriteRouteImport.update({
  id: '/api/sync/write',
  path: '/api/sync/write',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSyncReadRoute = ApiSyncReadRouteImport.update({
  id: '/api/sync/read',
  path: '/api/sync/read',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiChatCompletionsRoute = ApiChatCompletionsRouteImport.update({
  id: '/api/chat/completions',
  path: '/api/chat/completions',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCallbackAuthRoute = ApiCallbackAuthRouteImport.update({
  id: '/api/callback/auth',
  path: '/api/callback/auth',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/callback/auth': typeof ApiCallbackAuthRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/callback/auth': typeof ApiCallbackAuthRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/callback/auth': typeof ApiCallbackAuthRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/callback/auth'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/callback/auth'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
  id:
    | '__root__'
    | '/'
    | '/api/callback/auth'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiCallbackAuthRoute: typeof ApiCallbackAuthRoute
  ApiChatCompletionsRoute: typeof ApiChatCompletionsRoute
  ApiSyncReadRoute: typeof ApiSyncReadRoute
  ApiSyncWriteRoute: typeof ApiSyncWriteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/sync/write': {
      id: '/api/sync/write'
      path: '/api/sync/write'
      fullPath: '/api/sync/write'
      preLoaderRoute: typeof ApiSyncWriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/sync/read': {
      id: '/api/sync/read'
      path: '/api/sync/read'
      fullPath: '/api/sync/read'
      preLoaderRoute: typeof ApiSyncReadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/chat/completions': {
      id: '/api/chat/completions'
      path: '/api/chat/completions'
      fullPath: '/api/chat/completions'
      preLoaderRoute: typeof ApiChatCompletionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/callback/auth': {
      id: '/api/callback/auth'
      path: '/api/callback/auth'
      fullPath: '/api/callback/auth'
      preLoaderRoute: typeof ApiCallbackAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiCallbackAuthRoute: ApiCallbackAuthRoute,
  ApiChatCompletionsRoute: ApiChatCompletionsRoute,
  ApiSyncReadRoute: ApiSyncReadRoute,
  ApiSyncWriteRoute: ApiSyncWriteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
