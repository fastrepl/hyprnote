// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async listCalendars() : Promise<Result<Calendar[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_calendars") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listParticipants(eventId: string) : Promise<Result<Human[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_participants", { eventId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertCalendar(calendar: Calendar) : Promise<Result<Calendar, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_calendar", { calendar }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertSession(session: Session) : Promise<Result<Session, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_session", { session }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listTemplates() : Promise<Result<Template[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_templates") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertTemplate(template: Template) : Promise<Result<Template, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_template", { template }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteTemplate(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_template", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listEvents() : Promise<Result<Event[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_events") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listSessions(search: string | null) : Promise<Result<Session[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_sessions", { search }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSession(option: SessionFilter) : Promise<Result<Session | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_session", { option }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setSessionEvent(sessionId: string, eventId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|set_session_event", { sessionId, eventId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getConfig() : Promise<Result<Config, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_config") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setConfig(config: Config) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|set_config", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSelfHuman() : Promise<Result<Human, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_self_human") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertHuman(human: Human) : Promise<Result<Human, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_human", { human }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSelfOrganization() : Promise<Result<Organization, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_self_organization") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertOrganization(organization: Organization) : Promise<Result<Organization, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_organization", { organization }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listChatGroups(userId: string) : Promise<Result<ChatGroup[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_chat_groups", { userId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listChatMessages(groupId: string) : Promise<Result<ChatMessage[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_chat_messages", { groupId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createChatGroup(group: ChatGroup) : Promise<Result<ChatGroup, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|create_chat_group", { group }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertChatMessage(message: ChatMessage) : Promise<Result<ChatMessage, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_chat_message", { message }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Calendar = { id: string; tracking_id: string; user_id: string; platform: Platform; name: string; selected: boolean }
export type ChatGroup = { id: string; user_id: string; name: string | null; created_at: string }
export type ChatMessage = { id: string; group_id: string; created_at: string; role: ChatMessageRole; content: string }
export type ChatMessageRole = "User" | "Assistant"
export type Config = { id: string; user_id: string; general: ConfigGeneral; notification: ConfigNotification }
export type ConfigGeneral = { autostart: boolean; speech_language: string; display_language: string; jargons: string[]; tags: string[] }
export type ConfigNotification = { before: boolean; auto: boolean }
export type ConversationChunk = { start: string; end: string; local_audio_path: string; remote_audio_path: string; transcripts: TranscriptChunk[]; diarizations: DiarizationChunk[] }
export type DiarizationChunk = { start: number; end: number; speaker: string }
export type Event = { id: string; user_id: string; tracking_id: string; calendar_id: string; name: string; note: string; start_date: string; end_date: string; google_event_url: string | null }
export type Human = { id: string; organization_id: string | null; is_user: boolean; full_name: string | null; email: string | null; job_title: string | null; linkedin_username: string | null }
export type Organization = { id: string; name: string; description: string | null }
export type Platform = "Apple" | "Google"
export type Session = { id: string; user_id: string; timestamp: string; calendar_event_id: string | null; title: string; audio_local_path: string | null; audio_remote_path: string | null; raw_memo_html: string; enhanced_memo_html: string | null; conversations: ConversationChunk[] }
export type SessionFilter = { id: string } | { calendarEventId: string } | { tagId: string }
export type Template = { id: string; user_id: string; title: string; description: string; sections: TemplateSection[]; tags: string[] }
export type TemplateSection = { title: string; description: string }
export type TranscriptChunk = { start: number; end: number; text: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
