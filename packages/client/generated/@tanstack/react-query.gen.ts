// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getHealth, getApiDesktopUserIntegrations, postApiWebConnect, getApiWebCheckout, getApiWebSessionById, postApiWebIntegrationConnection, postChatCompletions } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetHealthData, GetApiDesktopUserIntegrationsData, PostApiWebConnectData, PostApiWebConnectResponse, GetApiWebCheckoutData, GetApiWebSessionByIdData, PostApiWebIntegrationConnectionData, PostApiWebIntegrationConnectionResponse, PostChatCompletionsData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) => createQueryKey('getHealth', options);

export const getHealthOptions = (options?: Options<GetHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHealthQueryKey(options)
    });
};

export const getApiDesktopUserIntegrationsQueryKey = (options?: Options<GetApiDesktopUserIntegrationsData>) => createQueryKey('getApiDesktopUserIntegrations', options);

export const getApiDesktopUserIntegrationsOptions = (options?: Options<GetApiDesktopUserIntegrationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiDesktopUserIntegrations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiDesktopUserIntegrationsQueryKey(options)
    });
};

export const postApiWebConnectQueryKey = (options: Options<PostApiWebConnectData>) => createQueryKey('postApiWebConnect', options);

export const postApiWebConnectOptions = (options: Options<PostApiWebConnectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiWebConnect({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiWebConnectQueryKey(options)
    });
};

export const postApiWebConnectMutation = (options?: Partial<Options<PostApiWebConnectData>>) => {
    const mutationOptions: UseMutationOptions<PostApiWebConnectResponse, DefaultError, Options<PostApiWebConnectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiWebConnect({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiWebCheckoutQueryKey = (options?: Options<GetApiWebCheckoutData>) => createQueryKey('getApiWebCheckout', options);

export const getApiWebCheckoutOptions = (options?: Options<GetApiWebCheckoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiWebCheckout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiWebCheckoutQueryKey(options)
    });
};

export const getApiWebSessionByIdQueryKey = (options: Options<GetApiWebSessionByIdData>) => createQueryKey('getApiWebSessionById', options);

export const getApiWebSessionByIdOptions = (options: Options<GetApiWebSessionByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiWebSessionById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiWebSessionByIdQueryKey(options)
    });
};

export const postApiWebIntegrationConnectionQueryKey = (options: Options<PostApiWebIntegrationConnectionData>) => createQueryKey('postApiWebIntegrationConnection', options);

export const postApiWebIntegrationConnectionOptions = (options: Options<PostApiWebIntegrationConnectionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiWebIntegrationConnection({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiWebIntegrationConnectionQueryKey(options)
    });
};

export const postApiWebIntegrationConnectionMutation = (options?: Partial<Options<PostApiWebIntegrationConnectionData>>) => {
    const mutationOptions: UseMutationOptions<PostApiWebIntegrationConnectionResponse, DefaultError, Options<PostApiWebIntegrationConnectionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiWebIntegrationConnection({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postChatCompletionsQueryKey = (options: Options<PostChatCompletionsData>) => createQueryKey('postChatCompletions', options);

export const postChatCompletionsOptions = (options: Options<PostChatCompletionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChatCompletions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChatCompletionsQueryKey(options)
    });
};

export const postChatCompletionsMutation = (options?: Partial<Options<PostChatCompletionsData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostChatCompletionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChatCompletions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};