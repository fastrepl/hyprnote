// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async syncCalendars() : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|sync_calendars");
},
async getCalendars() : Promise<Calendar[]> {
    return await TAURI_INVOKE("plugin:google-calendar|get_calendars");
},
async syncEvents(calendarId: string | null) : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|sync_events", { calendarId });
},
async syncContacts() : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|sync_contacts");
},
async getContacts() : Promise<Contact[]> {
    return await TAURI_INVOKE("plugin:google-calendar|get_contacts");
},
async searchContacts(query: string) : Promise<Contact[]> {
    return await TAURI_INVOKE("plugin:google-calendar|search_contacts", { query });
},
async revokeAccess() : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|revoke_access");
},
async refreshTokens() : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|refresh_tokens");
},
async getConnectedAccounts() : Promise<MultiAccountStatus> {
    return await TAURI_INVOKE("plugin:google-calendar|get_connected_accounts");
},
async addGoogleAccount() : Promise<string> {
    return await TAURI_INVOKE("plugin:google-calendar|add_google_account");
},
async removeGoogleAccount(email: string) : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|remove_google_account", { email });
},
async getCalendarsForAccount(email: string) : Promise<Calendar[]> {
    return await TAURI_INVOKE("plugin:google-calendar|get_calendars_for_account", { email });
},
async getContactsForAccount(email: string) : Promise<Contact[]> {
    return await TAURI_INVOKE("plugin:google-calendar|get_contacts_for_account", { email });
},
async getCalendarSelections(email: string) : Promise<CalendarSelection[]> {
    return await TAURI_INVOKE("plugin:google-calendar|get_calendar_selections", { email });
},
async setCalendarSelected(email: string, calendarId: string, selected: boolean) : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|set_calendar_selected", { email, calendarId, selected });
},
async startWorker(userId: string) : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|start_worker", { userId });
},
async stopWorker() : Promise<null> {
    return await TAURI_INVOKE("plugin:google-calendar|stop_worker");
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Calendar = { id: string; summary: string; description: string | null; primary: boolean | null; access_role: string | null; selected: boolean | null; color_id: string | null; background_color: string | null; foreground_color: string | null; account_email?: string | null }
export type CalendarSelection = { calendarId: string; calendarName: string; selected: boolean; color: string | null }
export type Contact = { resourceName: string; names: ContactName[] | null; emailAddresses: ContactEmailAddress[] | null; phoneNumbers: ContactPhoneNumber[] | null; organizations: ContactOrganization[] | null; account_email?: string | null }
export type ContactEmailAddress = { value: string; type: string | null }
export type ContactName = { displayName: string | null; familyName: string | null; givenName: string | null }
export type ContactOrganization = { name: string | null; title: string | null }
export type ContactPhoneNumber = { value: string; type: string | null }
export type DebugInfo = { clientIdAvailable: boolean; clientIdPreview: string | null; clientSecretAvailable: boolean; redirectUriAvailable: boolean; redirectUri: string | null; buildInfo: string }
export type Event = { id: string; summary: string | null; description: string | null; start: EventDateTime; end: EventDateTime; location: string | null; status: string | null; creator: EventCreator | null; organizer: EventOrganizer | null; attendees: EventAttendee[] | null; created: string | null; updated: string | null; htmlLink: string | null }
export type EventAttendee = { email: string; displayName: string | null; responseStatus: string | null }
export type EventCreator = { email: string | null; displayName: string | null }
export type EventDateTime = { dateTime: string | null; date: string | null; timeZone: string | null }
export type EventOrganizer = { email: string | null; displayName: string | null }
export type GoogleAccount = { email: string; name: string; picture: string | null; googleId: string; calendarAccess: boolean; contactsAccess: boolean; connectedAt: string }
export type MultiAccountStatus = { connectedAccounts: GoogleAccount[]; totalAccounts: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
