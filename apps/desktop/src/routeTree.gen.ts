/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/app'
import { Route as AppIndexImport } from './routes/app.index'
import { Route as AppNewImport } from './routes/app.new'
import { Route as AppCalendarImport } from './routes/app.calendar'
import { Route as AppOrganizationIdImport } from './routes/app.organization.$id'
import { Route as AppNoteIdImport } from './routes/app.note.$id'
import { Route as AppHumanIdImport } from './routes/app.human.$id'
import { Route as AppOrganizationIdSubImport } from './routes/app.organization.$id.sub'
import { Route as AppOrganizationIdMainImport } from './routes/app.organization.$id.main'
import { Route as AppNoteIdSubImport } from './routes/app.note.$id.sub'
import { Route as AppNoteIdMainImport } from './routes/app.note.$id.main'
import { Route as AppHumanIdSubImport } from './routes/app.human.$id.sub'
import { Route as AppHumanIdMainImport } from './routes/app.human.$id.main'

// Create/Update Routes

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppNewRoute = AppNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRoute,
} as any)

const AppCalendarRoute = AppCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AppRoute,
} as any)

const AppOrganizationIdRoute = AppOrganizationIdImport.update({
  id: '/organization/$id',
  path: '/organization/$id',
  getParentRoute: () => AppRoute,
} as any)

const AppNoteIdRoute = AppNoteIdImport.update({
  id: '/note/$id',
  path: '/note/$id',
  getParentRoute: () => AppRoute,
} as any)

const AppHumanIdRoute = AppHumanIdImport.update({
  id: '/human/$id',
  path: '/human/$id',
  getParentRoute: () => AppRoute,
} as any)

const AppOrganizationIdSubRoute = AppOrganizationIdSubImport.update({
  id: '/sub',
  path: '/sub',
  getParentRoute: () => AppOrganizationIdRoute,
} as any)

const AppOrganizationIdMainRoute = AppOrganizationIdMainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => AppOrganizationIdRoute,
} as any)

const AppNoteIdSubRoute = AppNoteIdSubImport.update({
  id: '/sub',
  path: '/sub',
  getParentRoute: () => AppNoteIdRoute,
} as any)

const AppNoteIdMainRoute = AppNoteIdMainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => AppNoteIdRoute,
} as any)

const AppHumanIdSubRoute = AppHumanIdSubImport.update({
  id: '/sub',
  path: '/sub',
  getParentRoute: () => AppHumanIdRoute,
} as any)

const AppHumanIdMainRoute = AppHumanIdMainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => AppHumanIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/app/calendar': {
      id: '/app/calendar'
      path: '/calendar'
      fullPath: '/app/calendar'
      preLoaderRoute: typeof AppCalendarImport
      parentRoute: typeof AppImport
    }
    '/app/new': {
      id: '/app/new'
      path: '/new'
      fullPath: '/app/new'
      preLoaderRoute: typeof AppNewImport
      parentRoute: typeof AppImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/app/human/$id': {
      id: '/app/human/$id'
      path: '/human/$id'
      fullPath: '/app/human/$id'
      preLoaderRoute: typeof AppHumanIdImport
      parentRoute: typeof AppImport
    }
    '/app/note/$id': {
      id: '/app/note/$id'
      path: '/note/$id'
      fullPath: '/app/note/$id'
      preLoaderRoute: typeof AppNoteIdImport
      parentRoute: typeof AppImport
    }
    '/app/organization/$id': {
      id: '/app/organization/$id'
      path: '/organization/$id'
      fullPath: '/app/organization/$id'
      preLoaderRoute: typeof AppOrganizationIdImport
      parentRoute: typeof AppImport
    }
    '/app/human/$id/main': {
      id: '/app/human/$id/main'
      path: '/main'
      fullPath: '/app/human/$id/main'
      preLoaderRoute: typeof AppHumanIdMainImport
      parentRoute: typeof AppHumanIdImport
    }
    '/app/human/$id/sub': {
      id: '/app/human/$id/sub'
      path: '/sub'
      fullPath: '/app/human/$id/sub'
      preLoaderRoute: typeof AppHumanIdSubImport
      parentRoute: typeof AppHumanIdImport
    }
    '/app/note/$id/main': {
      id: '/app/note/$id/main'
      path: '/main'
      fullPath: '/app/note/$id/main'
      preLoaderRoute: typeof AppNoteIdMainImport
      parentRoute: typeof AppNoteIdImport
    }
    '/app/note/$id/sub': {
      id: '/app/note/$id/sub'
      path: '/sub'
      fullPath: '/app/note/$id/sub'
      preLoaderRoute: typeof AppNoteIdSubImport
      parentRoute: typeof AppNoteIdImport
    }
    '/app/organization/$id/main': {
      id: '/app/organization/$id/main'
      path: '/main'
      fullPath: '/app/organization/$id/main'
      preLoaderRoute: typeof AppOrganizationIdMainImport
      parentRoute: typeof AppOrganizationIdImport
    }
    '/app/organization/$id/sub': {
      id: '/app/organization/$id/sub'
      path: '/sub'
      fullPath: '/app/organization/$id/sub'
      preLoaderRoute: typeof AppOrganizationIdSubImport
      parentRoute: typeof AppOrganizationIdImport
    }
  }
}

// Create and export the route tree

interface AppHumanIdRouteChildren {
  AppHumanIdMainRoute: typeof AppHumanIdMainRoute
  AppHumanIdSubRoute: typeof AppHumanIdSubRoute
}

const AppHumanIdRouteChildren: AppHumanIdRouteChildren = {
  AppHumanIdMainRoute: AppHumanIdMainRoute,
  AppHumanIdSubRoute: AppHumanIdSubRoute,
}

const AppHumanIdRouteWithChildren = AppHumanIdRoute._addFileChildren(
  AppHumanIdRouteChildren,
)

interface AppNoteIdRouteChildren {
  AppNoteIdMainRoute: typeof AppNoteIdMainRoute
  AppNoteIdSubRoute: typeof AppNoteIdSubRoute
}

const AppNoteIdRouteChildren: AppNoteIdRouteChildren = {
  AppNoteIdMainRoute: AppNoteIdMainRoute,
  AppNoteIdSubRoute: AppNoteIdSubRoute,
}

const AppNoteIdRouteWithChildren = AppNoteIdRoute._addFileChildren(
  AppNoteIdRouteChildren,
)

interface AppOrganizationIdRouteChildren {
  AppOrganizationIdMainRoute: typeof AppOrganizationIdMainRoute
  AppOrganizationIdSubRoute: typeof AppOrganizationIdSubRoute
}

const AppOrganizationIdRouteChildren: AppOrganizationIdRouteChildren = {
  AppOrganizationIdMainRoute: AppOrganizationIdMainRoute,
  AppOrganizationIdSubRoute: AppOrganizationIdSubRoute,
}

const AppOrganizationIdRouteWithChildren =
  AppOrganizationIdRoute._addFileChildren(AppOrganizationIdRouteChildren)

interface AppRouteChildren {
  AppCalendarRoute: typeof AppCalendarRoute
  AppNewRoute: typeof AppNewRoute
  AppIndexRoute: typeof AppIndexRoute
  AppHumanIdRoute: typeof AppHumanIdRouteWithChildren
  AppNoteIdRoute: typeof AppNoteIdRouteWithChildren
  AppOrganizationIdRoute: typeof AppOrganizationIdRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppCalendarRoute: AppCalendarRoute,
  AppNewRoute: AppNewRoute,
  AppIndexRoute: AppIndexRoute,
  AppHumanIdRoute: AppHumanIdRouteWithChildren,
  AppNoteIdRoute: AppNoteIdRouteWithChildren,
  AppOrganizationIdRoute: AppOrganizationIdRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/new': typeof AppNewRoute
  '/app/': typeof AppIndexRoute
  '/app/human/$id': typeof AppHumanIdRouteWithChildren
  '/app/note/$id': typeof AppNoteIdRouteWithChildren
  '/app/organization/$id': typeof AppOrganizationIdRouteWithChildren
  '/app/human/$id/main': typeof AppHumanIdMainRoute
  '/app/human/$id/sub': typeof AppHumanIdSubRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
  '/app/note/$id/sub': typeof AppNoteIdSubRoute
  '/app/organization/$id/main': typeof AppOrganizationIdMainRoute
  '/app/organization/$id/sub': typeof AppOrganizationIdSubRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/new': typeof AppNewRoute
  '/app': typeof AppIndexRoute
  '/app/human/$id': typeof AppHumanIdRouteWithChildren
  '/app/note/$id': typeof AppNoteIdRouteWithChildren
  '/app/organization/$id': typeof AppOrganizationIdRouteWithChildren
  '/app/human/$id/main': typeof AppHumanIdMainRoute
  '/app/human/$id/sub': typeof AppHumanIdSubRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
  '/app/note/$id/sub': typeof AppNoteIdSubRoute
  '/app/organization/$id/main': typeof AppOrganizationIdMainRoute
  '/app/organization/$id/sub': typeof AppOrganizationIdSubRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/new': typeof AppNewRoute
  '/app/': typeof AppIndexRoute
  '/app/human/$id': typeof AppHumanIdRouteWithChildren
  '/app/note/$id': typeof AppNoteIdRouteWithChildren
  '/app/organization/$id': typeof AppOrganizationIdRouteWithChildren
  '/app/human/$id/main': typeof AppHumanIdMainRoute
  '/app/human/$id/sub': typeof AppHumanIdSubRoute
  '/app/note/$id/main': typeof AppNoteIdMainRoute
  '/app/note/$id/sub': typeof AppNoteIdSubRoute
  '/app/organization/$id/main': typeof AppOrganizationIdMainRoute
  '/app/organization/$id/sub': typeof AppOrganizationIdSubRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/login'
    | '/onboarding'
    | '/app/calendar'
    | '/app/new'
    | '/app/'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
    | '/app/human/$id/main'
    | '/app/human/$id/sub'
    | '/app/note/$id/main'
    | '/app/note/$id/sub'
    | '/app/organization/$id/main'
    | '/app/organization/$id/sub'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/onboarding'
    | '/app/calendar'
    | '/app/new'
    | '/app'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
    | '/app/human/$id/main'
    | '/app/human/$id/sub'
    | '/app/note/$id/main'
    | '/app/note/$id/sub'
    | '/app/organization/$id/main'
    | '/app/organization/$id/sub'
  id:
    | '__root__'
    | '/app'
    | '/login'
    | '/onboarding'
    | '/app/calendar'
    | '/app/new'
    | '/app/'
    | '/app/human/$id'
    | '/app/note/$id'
    | '/app/organization/$id'
    | '/app/human/$id/main'
    | '/app/human/$id/sub'
    | '/app/note/$id/main'
    | '/app/note/$id/sub'
    | '/app/organization/$id/main'
    | '/app/organization/$id/sub'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  OnboardingRoute: typeof OnboardingRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  OnboardingRoute: OnboardingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/login",
        "/onboarding"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/calendar",
        "/app/new",
        "/app/",
        "/app/human/$id",
        "/app/note/$id",
        "/app/organization/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/app/calendar": {
      "filePath": "app.calendar.tsx",
      "parent": "/app"
    },
    "/app/new": {
      "filePath": "app.new.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app.index.tsx",
      "parent": "/app"
    },
    "/app/human/$id": {
      "filePath": "app.human.$id.tsx",
      "parent": "/app",
      "children": [
        "/app/human/$id/main",
        "/app/human/$id/sub"
      ]
    },
    "/app/note/$id": {
      "filePath": "app.note.$id.tsx",
      "parent": "/app",
      "children": [
        "/app/note/$id/main",
        "/app/note/$id/sub"
      ]
    },
    "/app/organization/$id": {
      "filePath": "app.organization.$id.tsx",
      "parent": "/app",
      "children": [
        "/app/organization/$id/main",
        "/app/organization/$id/sub"
      ]
    },
    "/app/human/$id/main": {
      "filePath": "app.human.$id.main.tsx",
      "parent": "/app/human/$id"
    },
    "/app/human/$id/sub": {
      "filePath": "app.human.$id.sub.tsx",
      "parent": "/app/human/$id"
    },
    "/app/note/$id/main": {
      "filePath": "app.note.$id.main.tsx",
      "parent": "/app/note/$id"
    },
    "/app/note/$id/sub": {
      "filePath": "app.note.$id.sub.tsx",
      "parent": "/app/note/$id"
    },
    "/app/organization/$id/main": {
      "filePath": "app.organization.$id.main.tsx",
      "parent": "/app/organization/$id"
    },
    "/app/organization/$id/sub": {
      "filePath": "app.organization.$id.sub.tsx",
      "parent": "/app/organization/$id"
    }
  }
}
ROUTE_MANIFEST_END */
